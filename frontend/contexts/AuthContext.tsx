"use client"

import { createContext, useContext, ReactNode, useState, useEffect } from "react";
import { useLogin as useLoginHook, useLogout as useLogoutHook, useUser as useUserHook } from "@/hooks/useAuth";
import { User } from "@/services/queries/auth";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { storeUserIdInApiHeaders } from '@/config/axios';

// Interface du contexte d'authentification
interface AuthContextType {
  user: User | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  isSigningIn: boolean;
  signIn: (username: string) => Promise<void>;
  signOut: () => Promise<void>;
  checkAuthState: () => Promise<boolean>;
  initialized: boolean;
}

const AuthContext = createContext<AuthContextType>({} as AuthContextType);

export function AuthProvider({ children }: { children: ReactNode }) {
  const { data: user, isLoading: isUserLoading, refetch } = useUserHook();
  const loginMutation = useLoginHook();
  const logoutMutation = useLogoutHook();
  const [isSigningIn, setIsSigningIn] = useState(false);
  const [initialized, setInitialized] = useState(false);

  // V√©rifier l'√©tat d'authentification au d√©marrage
  useEffect(() => {
    checkAuthState();
  }, []);

  // Marquer comme initialis√© lorsque le chargement initial est termin√©
  useEffect(() => {
    if (!isUserLoading) {
      setInitialized(true);
    }
  }, [isUserLoading]);

  // Fonction pour v√©rifier l'√©tat d'authentification
  const checkAuthState = async () => {
    console.log("üîç V√©rification de l'√©tat d'authentification");
    try {
      const token = await AsyncStorage.getItem('@auth_token');
      const hasAuth = !!token;
      
      if (hasAuth && !user) {
        console.log('üîÑ Token pr√©sent, actualisation des donn√©es utilisateur');
        await refetch();
      }
      
      console.log(`üîí √âtat d'authentification: ${hasAuth ? 'Authentifi√©' : 'Non authentifi√©'}`);
      return hasAuth;
    } catch (error) {
      console.error("‚ùå Erreur lors de la v√©rification de l'authentification", error);
      return false;
    }
  };

  // Fonction de connexion
  const signIn = async (username: string) => {
    console.log('üîê Tentative de connexion avec', username);
    setIsSigningIn(true);
    try {
      const userData = await loginMutation.mutateAsync(username);
      
      // Stockage du token apr√®s connexion r√©ussie
      if (userData && userData.token) {
        await AsyncStorage.setItem('@auth_token', userData.token);
        console.log('üîë Token stock√© apr√®s connexion');
      }

      // Stocker l'ID utilisateur dans les en-t√™tes API
      await storeUserIdInApiHeaders();
      
      await refetch(); // Actualiser les donn√©es utilisateur apr√®s connexion
      console.log('‚úÖ Connexion r√©ussie');
      return;
    } catch (error) {
      console.error('‚ùå Erreur lors de la connexion', error);
      throw error;
    } finally {
      setIsSigningIn(false);
    }
  };

  // Fonction de d√©connexion
  const signOut = async () => {
    console.log('üîê Tentative de d√©connexion');
    setIsSigningIn(true);
    try {
      // D√©connexion via le service d'authentification
      await logoutMutation.mutateAsync();
      
      // Supprimer le token de stockage local
      await AsyncStorage.removeItem('@auth_token');
      await AsyncStorage.removeItem('@user_data');
      
      console.log("‚úÖ D√©connexion r√©ussie");
    } catch (error) {
      console.error("‚ùå Erreur lors de la d√©connexion:", error);
      
      // M√™me en cas d'erreur, on supprime le token local pour assurer la d√©connexion
      await AsyncStorage.removeItem('@auth_token');
      await AsyncStorage.removeItem('@user_data');
    } finally {
      setIsSigningIn(false);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isLoading: isUserLoading,
        isAuthenticated: !!user,
        isSigningIn,
        signIn,
        signOut,
        checkAuthState,
        initialized
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
}
