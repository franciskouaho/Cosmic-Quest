import axios from 'axios';
import { Platform } from 'react-native';
import NetInfo from '@react-native-community/netinfo';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Configuration pour les appels API

// D√©tection de l'environnement d'ex√©cution
const isExpo = typeof process !== 'undefined' && process.env?.EXPO_PUBLIC_API_URL;
const isAndroidEmulator = Platform.OS === 'android';
const isIosSimulator = Platform.OS === 'ios';

// D√©finir l'URL de base de l'API en fonction de l'environnement
let apiBaseUrl = '';
let socketBaseUrl = '';

if (isExpo) {
  // Utiliser la variable d'environnement d'Expo si disponible
  apiBaseUrl = process.env.EXPO_PUBLIC_API_URL || '';
  socketBaseUrl = process.env.EXPO_PUBLIC_WS_URL || '';
} else if (isAndroidEmulator) {
  // Adresse sp√©ciale pour l'√©mulateur Android (10.0.2.2 pointe vers localhost de la machine h√¥te)
  apiBaseUrl = 'http://10.0.2.2:3333';
  socketBaseUrl = 'http://10.0.2.2:3333';
} else if (isIosSimulator) {
  // Pour le simulateur iOS, localhost fonctionne car il partage le r√©seau de l'h√¥te
  apiBaseUrl = 'http://localhost:3333';
  socketBaseUrl = 'http://localhost:3333';
} else {
  // Par d√©faut, utiliser localhost
  apiBaseUrl = 'http://localhost:3333';
  socketBaseUrl = 'http://localhost:3333';
}

// URL de base pour les requ√™tes API REST
export const API_URL = `${apiBaseUrl}/api/v1`;

// URL pour les connexions WebSocket
export const SOCKET_URL = API_URL.replace('/api/v1', '');

console.log('üì± Platform.OS:', Platform.OS);
console.log('üåç API_URL configur√©:', API_URL);
console.log('üîå SOCKET_URL configur√©:', SOCKET_URL);

// V√©rifier p√©riodiquement la connectivit√©
NetInfo.addEventListener(state => {
  console.log('üåê √âtat de connexion:', 
    state.isConnected 
      ? `Connect√© (${state.type})` 
      : 'Non connect√©');
});

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
  timeout: 15000,
});

// M√©thode pour r√©cup√©rer et stocker l'ID utilisateur actuel
export const storeUserIdInApiHeaders = async () => {
  try {
    // Essayer de r√©cup√©rer l'ID utilisateur depuis le stockage local
    const userData = await AsyncStorage.getItem('@user_data');
    if (userData) {
      const user = JSON.parse(userData);
      if (user && user.id) {
        // Stocker l'ID utilisateur dans les en-t√™tes globaux
        api.defaults.headers.userId = user.id;
        console.log(`üë§ API: ID utilisateur ${user.id} enregistr√© dans les en-t√™tes`);
        return user.id;
      }
    }
    return null;
  } catch (err) {
    console.warn('‚ö†Ô∏è Erreur lors de la r√©cup√©ration/stockage de l\'ID utilisateur:', err);
    return null;
  }
};

// Intercepteur pour ajouter le token d'authentification √† chaque requ√™te
api.interceptors.request.use(async config => {
  try {
    // V√©rifier la connexion internet
    const netInfo = await NetInfo.fetch();
    if (!netInfo.isConnected) {
      throw new Error('Pas de connexion internet. Veuillez v√©rifier votre connexion et r√©essayer.');
    }
    
    // R√©cup√©rer le token depuis AsyncStorage
    const token = await AsyncStorage.getItem('@auth_token');
    
    // Log pour d√©boguer (apr√®s celle existante)
    console.log('‚û°Ô∏è Requ√™te sortante:', {
      method: config.method,
      url: config.url,
      data: config.data,
      headers: config.headers,
      baseURL: config.baseURL
    });
    
    console.log(`üîë Token pr√©sent: ${!!token}`);
    
    // Si le token existe, l'ajouter aux headers
    if (token) {
      // Important: s'assurer que les headers sont correctement d√©finis
      if (!config.headers) {
        config.headers = {};
      }
      config.headers.Authorization = `Bearer ${token}`;
      console.log('üîí Token ajout√© aux headers de la requ√™te');
      
      // V√©rifier que le token est bien ajout√©
      console.log('üîç Headers apr√®s ajout du token:', config.headers);

      // S'assurer que l'ID utilisateur est √©galement disponible
      if (!api.defaults.headers.userId) {
        await storeUserIdInApiHeaders();
      }
    } else {
      console.warn('‚ö†Ô∏è Token absent, requ√™te envoy√©e sans authentification');
    }
    
    return config;
  } catch (error) {
    console.error("‚ùå Erreur dans l'intercepteur de requ√™te:", error);
    return Promise.reject(error);
  }
}, error => {
  console.error('‚ùå Erreur lors de la pr√©paration de la requ√™te:', error);
  return Promise.reject(error);
});

// Intercepteur pour g√©rer les r√©ponses et les erreurs
api.interceptors.response.use(
  response => {
    console.log('‚úÖ R√©ponse re√ßue:', {
      status: response.status,
      data: JSON.stringify(response.data).substring(0, 200) + (JSON.stringify(response.data).length > 200 ? '...' : '')
    });
    return response;
  },
  async error => {
    // G√©rer sp√©cifiquement les erreurs d'authentification (401)
    if (error.response && error.response.status === 401) {
      const originalRequest = error.config;
      
      if (!originalRequest._retry) {
        originalRequest._retry = true;
        
        console.log('üîÑ Tentative de reconnexion automatique apr√®s erreur 401');
        console.log('üìÑ D√©tails de l\'erreur 401:', error.response?.data);
        console.log('üîç URL de la requ√™te √©chou√©e:', originalRequest.url);
        
        // Supprimer le token invalide
        await AsyncStorage.removeItem('@auth_token');
        console.log('üîë Token supprim√© apr√®s erreur 401');
        
        // Rediriger l'utilisateur vers la connexion ou rafra√Æchir le token
      }
    }
    
    // Traiter les autres types d'erreurs
    if (error.response) {
      // La requ√™te a √©t√© faite et le serveur a r√©pondu avec un status code
      console.error('‚ùå Erreur API (r√©ponse serveur):', {
        status: error.response.status,
        data: error.response.data,
        headers: error.response.headers,
      });
    } else if (error.request) {
      // La requ√™te a √©t√© faite mais aucune r√©ponse n'a √©t√© re√ßue
      console.error('‚ùå Erreur API (pas de r√©ponse):', error.message);
      
      // V√©rifier l'√©tat de la connexion
      const netInfo = await NetInfo.fetch();
      console.error(`üåê √âtat connexion lors de l'erreur: ${netInfo.isConnected ? 'Connect√©' : 'Non connect√©'} (${netInfo.type})`);
    } else {
      // Une erreur s'est produite lors de la configuration de la requ√™te
      console.error('‚ùå Erreur API (configuration):', error.message);
    }
    
    return Promise.reject(error);
  }
);

// Initialiser l'ID utilisateur au d√©marrage de l'application
storeUserIdInApiHeaders().catch(err => 
  console.warn('‚ö†Ô∏è Erreur lors de l\'initialisation de l\'ID utilisateur:', err)
);

export default api;
