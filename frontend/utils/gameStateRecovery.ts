/**
 * Utilitaire pour r√©cup√©rer des √©tats de jeu probl√©matiques
 */
import SocketService from "@/services/socketService";
import api from "@/config/axios";
import UserIdManager from "./userIdManager";

export class GameStateRecovery {
  /**
   * Tente de r√©cup√©rer un √©tat de jeu d√©faillant
   * @param gameId ID du jeu √† r√©cup√©rer
   */
  static async recoverFromPersistentError(gameId: string): Promise<boolean> {
    console.log(`üîÑ [GameStateRecovery] Tentative de r√©cup√©ration pour le jeu ${gameId}`);
    try {
      // 1. Tenter de r√©cup√©rer via le socket
      const socketRecovery = await this.recoverViaSocket(gameId);
      
      if (socketRecovery) {
        console.log(`‚úÖ [GameStateRecovery] R√©cup√©ration via socket r√©ussie`);
        return true;
      }
      
      // 2. Si √©chec, tenter via API REST
      const apiRecovery = await this.recoverViaAPI(gameId);
      
      if (apiRecovery) {
        console.log(`‚úÖ [GameStateRecovery] R√©cup√©ration via API r√©ussie`);
        return true;
      }
      
      console.log(`‚ö†Ô∏è [GameStateRecovery] √âchec de la r√©cup√©ration`);
      return false;
    } catch (error) {
      console.error(`‚ùå [GameStateRecovery] Erreur lors de la r√©cup√©ration:`, error);
      return false;
    }
  }
  
  /**
   * Tente de r√©cup√©rer l'√©tat via un reset du socket
   */
  static async recoverViaSocket(gameId: string): Promise<boolean> {
    console.log(`üîÑ [GameStateRecovery] Tentative de r√©cup√©ration via WebSocket pour le jeu ${gameId}`);
    try {
      // Initialiser la connexion WebSocket si n√©cessaire
      await SocketService.getInstanceAsync();
      
      // Rejoindre le canal de jeu si n√©cessaire
      const socketDiagnostic = SocketService.diagnose();
      const isInGameChannel = socketDiagnostic.details?.currentGame === gameId || 
                             (socketDiagnostic.details?.activeGames && 
                              Array.isArray(socketDiagnostic.details.activeGames) && 
                              socketDiagnostic.details.activeGames.includes(gameId));
      
      if (!isInGameChannel) {
        console.log(`üîÑ [GameStateRecovery] Tentative de rejoindre le canal de jeu ${gameId}`);
        await SocketService.joinGameChannel(gameId);
      }
      
      // Forcer une v√©rification de phase
      console.log(`üîÑ [GameStateRecovery] For√ßage d'une v√©rification de phase pour le jeu ${gameId}`);
      await SocketService.forcePhaseCheck(gameId);
      
      return true;
    } catch (error) {
      console.error(`‚ùå [GameStateRecovery] √âchec de la r√©cup√©ration via WebSocket:`, error);
      return false;
    }
  }
  
  /**
   * Tente de r√©cup√©rer l'√©tat via un appel API direct
   */
  static async recoverViaAPI(gameId: string): Promise<boolean> {
    console.log(`üîÑ [GameStateRecovery] Tentative de r√©cup√©ration via API pour le jeu ${gameId}`);
    try {
      // Obtenir l'ID utilisateur
      const userId = await UserIdManager.getUserId();
      if (!userId) {
        console.warn(`‚ö†Ô∏è [GameStateRecovery] ID utilisateur non disponible`);
        return false;
      }
      
      // Appeler l'API de r√©cup√©ration
      const response = await api.post(`/games/${gameId}/recover`, {
        userId,
        timestamp: Date.now()
      });
      
      return response.data?.success === true;
    } catch (error) {
      console.error(`‚ùå [GameStateRecovery] √âchec de la r√©cup√©ration via API:`, error);
      return false;
    }
  }
  
  /**
   * Fournit un √©tat minimal en cas d'√©chec total
   * @param gameState √âtat original (peut √™tre null)
   * @param userId ID de l'utilisateur actuel
   */
  static sanitizeGameState(gameState: any, userId: string | null): any {
    // Cr√©er un √©tat minimal en cas d'erreur majeure pour √©viter un crash complet
    return {
      recovered: true,
      game: {
        id: gameState?.game?.id || 0,
        currentRound: gameState?.game?.currentRound || 1,
        totalRounds: gameState?.game?.totalRounds || 5,
        currentPhase: 'waiting',
        status: 'in_progress',
        roomId: gameState?.game?.roomId || 0,
        gameMode: gameState?.game?.gameMode || 'standard',
        scores: gameState?.game?.scores || {}
      },
      currentQuestion: null,
      answers: [],
      players: gameState?.players || [],
      currentUserState: {
        hasAnswered: false,
        hasVoted: false,
        isTargetPlayer: false
      }
    };
  }
}

export default GameStateRecovery;
