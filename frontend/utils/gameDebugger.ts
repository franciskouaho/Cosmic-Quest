import SocketService from '@/services/socketService';
import api from '@/config/axios';
import { GameState } from '../types/gameTypes';
import { UserIdManager } from './userIdManager';

/**
 * Outils de d√©bogage pour le jeu
 */
interface GameDebuggerOptions {
  gameId: string;
  verbose?: boolean;
}

class GameDebugger {
  private gameId: string;
  private verbose: boolean;

  constructor(options: GameDebuggerOptions) {
    this.gameId = options.gameId;
    this.verbose = options.verbose || false;
    this.log('D√©bogueur initialis√© pour le jeu ' + this.gameId);
  }

  /**
   * Journalisation conditionnelle
   */
  private log(message: string, data?: any, level: 'log' | 'warn' | 'error' = 'log'): void {
    const prefix = 'üîç [GameDebugger]';
    
    switch (level) {
      case 'warn':
        console.warn(`‚ö†Ô∏è ${prefix} ${message}`, data || '');
        break;
      case 'error':
        console.error(`‚ùå ${prefix} ${message}`, data || '');
        break;
      default:
        console.log(`${prefix} ${message}`, data || '');
    }
  }

  /**
   * Forcer une correction de phase
   */
  async forcePhaseCorrection(correctPhase: string): Promise<boolean> {
    this.log(`Tentative de correction de phase vers ${correctPhase}`);
    
    try {
      // Obtenir l'instance du service socket de mani√®re asynchrone
      const socket = await SocketService.getInstanceAsync();
      
      // √âmettre l'√©v√©nement de correction
      socket.emit('forceRefreshUI', {
        type: 'phase_correction',
        correctPhase: correctPhase,
        gameId: this.gameId,
        timestamp: Date.now()
      });
      
      this.log('Signal de correction de phase envoy√©');
      
      // Envoyer √©galement un √©v√©nement force_check au serveur
      socket.emit('game:force_check', {
        gameId: this.gameId
      });
      
      this.log('Signal de v√©rification forc√©e envoy√© au serveur');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de la correction de phase:', error);
      return false;
    }
  }

  /**
   * Surveiller les changements de phase
   */
  async monitorPhaseChanges(): Promise<void> {
    try {
      const socket = await SocketService.getInstanceAsync();
      
      this.log('Monitoring des changements de phase activ√©');
      
      socket.on('game:update', (data) => {
        if (data.type === 'phase_change') {
          this.log(`Phase chang√©e: ${data.phase}`, data);
        }
      });
    } catch (error) {
      console.error('‚ùå Erreur lors du monitoring des phases:', error);
    }
  }

  /**
   * Forcer une v√©rification de l'√©tat du jeu
   */
  async forceStateCheck(): Promise<boolean> {
    this.log('Demande de v√©rification d\'√©tat');
    
    try {
      // Utiliser le service socket existant
      const socket = await SocketService.getInstanceAsync();
      
      return new Promise((resolve) => {
        socket.emit('game:status_check', { gameId: this.gameId }, (response) => {
          this.log('R√©ponse de la v√©rification d\'√©tat:', response);
          resolve(true);
        });
        
        // En cas d'absence de r√©ponse, r√©soudre apr√®s un d√©lai
        setTimeout(() => resolve(false), 3000);
      });
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification d\'√©tat:', error);
      return false;
    }
  }

  /**
   * Diagnostic de l'√©tat actuel de la connexion et du jeu
   */
  async diagnoseCurrent(): Promise<any> {
    try {
      const socket = await SocketService.getInstanceAsync();
      const socketDiagnostic = SocketService.diagnose();
      
      return {
        socketConnected: socket.connected,
        socketId: socket.id,
        gameId: this.gameId,
        inGameRoom: socketDiagnostic.activeChannels.games.includes(this.gameId),
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error('‚ùå Erreur de diagnostic:', error);
      return {
        error: error.message,
        socketAvailable: false,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Tentative de restauration d'un √©tat de jeu bloqu√©
   * Cette fonction tente de restaurer une partie qui g√©n√®re des erreurs 500
   */
  async recoverGameState(): Promise<boolean> {
    this.log('Tentative de restauration de l\'√©tat du jeu');
    
    try {
      // Obtenir l'instance du service socket
      const socket = await SocketService.getInstanceAsync();
      
      // √âmettre un √©v√©nement sp√©cial pour forcer une r√©initialisation de l'√©tat sur le serveur
      socket.emit('game:reset_state', {
        gameId: this.gameId,
        timestamp: Date.now()
      });
      
      this.log('Signal de restauration d\'√©tat envoy√©');

      // Donner au serveur le temps de traiter la demande
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Tenter de forcer une v√©rification d'√©tat coh√©rent
      await SocketService.forcePhaseCheck(this.gameId);
      
      this.log('V√©rification forc√©e effectu√©e');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de la restauration de l\'√©tat:', error);
      return false;
    }
  }

  /**
   * Tentative de nettoyage d'un √©tat de jeu bloqu√© via API directe
   * √Ä utiliser quand le socket ne r√©pond pas
   */
  async recoverGameStateViaAPI(): Promise<boolean> {
    this.log('Tentative de restauration via API REST');
    
    try {
      // R√©cup√©rer l'ID utilisateur pour l'authentification
      const userId = await UserIdManager.getUserId();
      if (!userId) {
        console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer: ID utilisateur non disponible');
        return false;
      }
      
      // Appeler une API sp√©ciale de r√©cup√©ration
      const response = await api.post(`/games/${this.gameId}/recover-state`, {
        userId: userId
      });
      
      this.log('R√©ponse de r√©cup√©ration:', response.data);
      
      return response.data?.status === 'success';
    } catch (error) {
      console.error('‚ùå Erreur lors de la tentative de r√©cup√©ration via API:', error);
      return false;
    }
  }

  /**
   * Analyser l'√©tat du jeu et d√©tecter les probl√®mes potentiels
   * @param gameState √âtat actuel du jeu
   */
  analyzeGameState(gameState: any): void {
    if (!gameState) {
      this.log('√âtat du jeu non d√©fini', null, 'warn');
      return;
    }
    
    // V√©rifier les probl√®mes courants
    if (gameState.phase === 'waiting' && gameState.game?.currentPhase === 'answer') {
      this.log('D√©tection de possible d√©synchronisation: UI en attente mais serveur en phase r√©ponse', gameState, 'warn');
    }
    
    // V√©rifier si le joueur est correctement identifi√© comme cible
    if (gameState.currentQuestion && gameState.currentUserState) {
      this.log(`√âtat du joueur: isTarget=${gameState.currentUserState.isTargetPlayer}, hasVoted=${gameState.currentUserState.hasVoted}`);
    }
  }

  /**
   * V√©rifier la coh√©rence de l'√©tat du joueur cibl√©
   * @param gameState √âtat du jeu
   * @param userId ID de l'utilisateur actuel
   */
  debugTargetPlayerState(gameState: any, userId?: string | number): { 
    hasInconsistency: boolean; 
    correctValue?: boolean; 
  } {
    if (!gameState || !gameState.currentQuestion || !userId) {
      return { hasInconsistency: false };
    }
    
    const targetId = gameState.currentQuestion.targetPlayer?.id;
    const userIdStr = String(userId);
    const targetIdStr = String(targetId || '');
    
    const calculatedIsTarget = userIdStr === targetIdStr;
    const currentIsTarget = Boolean(gameState.currentUserState?.isTargetPlayer);
    
    if (calculatedIsTarget !== currentIsTarget) {
      this.log(`Incoh√©rence d√©tect√©e: isTarget=${currentIsTarget} mais devrait √™tre ${calculatedIsTarget}`, {
        userId: userIdStr,
        targetId: targetIdStr
      }, 'warn');
      
      return {
        hasInconsistency: true,
        correctValue: calculatedIsTarget
      };
    }
    
    return { hasInconsistency: false };
  }

  /**
   * Tentative de d√©blocage d'un jeu bloqu√©
   * @param gameId ID du jeu
   */
  async attemptToUnblock(gameId: string): Promise<boolean> {
    try {
      this.log(`Tentative de d√©blocage du jeu ${gameId}`);
      
      // Appeler l'API pour forcer une v√©rification de phase
      await SocketService.forcePhaseCheck(gameId);
      this.log(`‚úÖ Demande de v√©rification de phase envoy√©e pour le jeu ${gameId}`);
      
      return true;
    } catch (error) {
      console.error(`‚ùå √âchec du d√©blocage:`, error);
      return false;
    }
  }
}

/**
 * Utilitaire pour d√©boguer et corriger les probl√®mes d'√©tat de jeu
 */
const gameDebugger = new GameDebugger({ gameId: '', verbose: true });

export const createGameDebugger = (options: GameDebuggerOptions): GameDebugger => {
  return new GameDebugger(options);
};

export default gameDebugger;
