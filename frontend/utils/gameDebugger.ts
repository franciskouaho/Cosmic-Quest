import AsyncStorage from '@react-native-async-storage/async-storage';
import api from '@/config/axios';
import { GameState } from '../types/gameTypes';
import { UserIdManager } from './userIdManager';

/**
 * Classe d'utilitaire pour le d√©bogage et la r√©cup√©ration des jeux
 */
class GameDebugger {
  private socketService: any; // SocketService

  constructor() {
    // Importer dynamiquement pour √©viter les d√©pendances circulaires
    import('../services/socketService').then(module => {
      this.socketService = module.default;
    });
  }

  /**
   * Force la correction d'une phase
   * @param gameId ID du jeu 
   * @param correctPhase Phase correcte √† d√©finir
   * @returns Promise<boolean> r√©sultat de l'op√©ration
   */
  async forcePhaseCorrection(gameId: string, correctPhase?: string): Promise<boolean> {
    try {
      console.log(`üîß GameDebugger: Tentative de correction de phase pour le jeu ${gameId}`);
      
      if (!this.socketService) {
        console.warn('‚ö†Ô∏è SocketService non disponible, chargement en cours...');
        await new Promise(resolve => setTimeout(resolve, 500));
        
        if (!this.socketService) {
          // Charger directement
          const socketModule = await import('../services/socketService');
          this.socketService = socketModule.default;
        }
      }
      
      // V√©rifier si la phase est sp√©cifi√©e
      if (correctPhase) {
        console.log(`üõ†Ô∏è Tentative de correction vers la phase sp√©cifique: ${correctPhase}`);
        // Logique sp√©cifique pour d√©finir une phase particuli√®re
        // Pourrait √™tre impl√©ment√©e dans le futur
      }
      
      // Utiliser la m√©thode standard de v√©rification de phase
      const result = await this.socketService.forcePhaseCheck(gameId);
      
      this.log('Signal de v√©rification forc√©e envoy√© au serveur');
      return result;
    } catch (error) {
      console.error('‚ùå Erreur lors de la correction de phase:', error);
      return false;
    }
  }
  
  /**
   * M√©thode utilitaire pour le logging
   */
  private log(message: string): void {
    console.log(`üêû GameDebugger: ${message}`);
  }
}

// Exporter une instance pour un usage simplifi√©
export default new GameDebugger();
