import { Alert } from 'react-native';
import axios from 'axios';
import { API_URL, SOCKET_URL } from '@/config/axios';
import SocketService from '@/services/socketService';
import gameWebSocketService from '@/services/gameWebSocketService';
import UserIdManager from './userIdManager';

/**
 * Utilitaire de d√©bogage pour les jeux Cosmic Quest
 * Fournit des fonctions pour diagnostiquer et r√©soudre les probl√®mes de synchronisation
 */
class GameDebugger {
  private static instance: GameDebugger;

  /**
   * Obtenir l'instance singleton du GameDebugger
   */
  public static getInstance(): GameDebugger {
    if (!GameDebugger.instance) {
      GameDebugger.instance = new GameDebugger();
    }
    return GameDebugger.instance;
  }

  /**
   * V√©rifie l'√©tat complet du socket et du jeu en mode instantan√©
   */
  public async diagnoseGameState(gameId: string): Promise<void> {
    try {
      console.log(`üîç GameDebugger: Diagnostic du jeu ${gameId} en cours...`);
      
      // 1. V√©rifier l'√©tat du socket (instantan√©)
      const socketState = await this.checkSocketState();
      
      // 2. Si probl√®me avec le socket, tenter de le r√©parer
      if (!socketState) {
        console.log(`üîß GameDebugger: Tentative de r√©paration de la connexion socket`);
        await this.repairSocketConnection();
      }
      
      // 3. Analyser l'√©tat du jeu via WebSocket (plus rapide)
      await this.checkGameStateWebSocket(gameId);
      
      console.log(`‚úÖ GameDebugger: Diagnostic du jeu ${gameId} termin√©`);
    } catch (error) {
      console.error(`‚ùå GameDebugger: Erreur lors du diagnostic:`, error);
    }
  }

  /**
   * Tente de r√©parer la connexion socket
   */
  private async repairSocketConnection(): Promise<boolean> {
    try {
      // Nettoyer compl√®tement le socket existant
      await SocketService.cleanup();
      console.log(`üßπ Socket nettoy√© compl√®tement`);
      
      // Activer l'initialisation automatique
      SocketService.setAutoInit(true);
      
      // Importer et utiliser testSocketConnection qui a une logique de r√©essai
      const { testSocketConnection } = await import('./socketTester');
      const connectionSuccess = await testSocketConnection(3);
      
      if (connectionSuccess) {
        console.log(`‚úÖ Connexion socket r√©par√©e avec succ√®s`);
      } else {
        console.warn(`‚ö†Ô∏è √âchec de la r√©paration socket apr√®s plusieurs tentatives`);
      }
      
      return connectionSuccess;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©paration socket:`, error);
      return false;
    }
  }

  /**
   * V√©rifie l'√©tat du socket
   */
  private async checkSocketState(): Promise<boolean> {
    try {
      let socket;
      
      try {
        // Tenter d'obtenir le socket sans forcer l'initialisation
        socket = SocketService.getSocketInstance();
      } catch (getError) {
        console.warn(`‚ö†Ô∏è Impossible d'obtenir l'instance socket:`, getError);
        return false;
      }
      
      if (!socket) {
        console.warn(`‚ö†Ô∏è Instance socket non disponible`);
        return false;
      }
      
      console.log(`üìä √âtat Socket:
        - Connect√©: ${socket.connected || false}
        - ID: ${socket.id || 'Non connect√©'}
        - URL: ${SOCKET_URL}
      `);
      
      return !!socket && socket.connected;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification du socket:`, error);
      return false;
    }
  }

  /**
   * V√©rifie l'√©tat du jeu via WebSocket (plus rapide que HTTP)
   */
  private async checkGameStateWebSocket(gameId: string): Promise<void> {
    try {
      const userId = await UserIdManager.getUserId();
      
      // Tenter d'obtenir le socket avec initialisation forc√©e
      console.log(`üîå Tentative d'obtention du socket avec initialisation forc√©e`);
      
      let socket;
      try {
        socket = await SocketService.getInstanceAsync(true);
      } catch (socketError) {
        console.warn(`‚ö†Ô∏è √âchec d'obtention du socket:`, socketError);
        // Continuer l'ex√©cution pour essayer le fallback
      }
      
      if (!socket || !socket.connected) {
        console.warn(`‚ö†Ô∏è Socket non disponible ou non connect√©, tentative alternative`);
        
        // Importer la m√©thode emergencyGameRecovery
        const { emergencyGameRecovery } = await import('./socketTester');
        await emergencyGameRecovery(gameId);
        
        // Essayer √† nouveau d'obtenir le socket
        try {
          socket = await SocketService.getInstanceAsync(true);
        } catch (retryError) {
          console.error(`‚ùå √âchec de la seconde tentative d'obtention du socket:`, retryError);
          return;
        }
      }
      
      if (!socket || !socket.connected) {
        console.error(`‚ùå Socket toujours non disponible apr√®s r√©cup√©ration`);
        return;
      }
      
      // Utiliser une promesse avec timeout
      const result = await Promise.race([
        new Promise<any>((resolve) => {
          socket.emit('game:get_state', { gameId, userId }, (response: any) => {
            resolve(response);
          });
        }),
        new Promise<any>((resolve) => {
          // Timeout court pour ne pas bloquer l'interface
          setTimeout(() => resolve({ success: false, error: 'Timeout' }), 2000);
        })
      ]);
      
      if (result?.success) {
        console.log(`üîå √âtat du jeu via WebSocket:
          - Phase: ${result.data?.game?.currentPhase}
          - Round: ${result.data?.game?.currentRound}/${result.data?.game?.totalRounds}
          - R√©ponses: ${result.data?.answers?.length || 0}
          - Joueurs: ${result.data?.players?.length || 0}
        `);
      } else {
        // Fallback √† HTTP en cas d'√©chec WebSocket
        console.warn(`‚ö†Ô∏è √âchec WebSocket, fallback HTTP sera utilis√© si n√©cessaire`);
      }
    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification WebSocket:`, error);
    }
  }

  /**
   * R√©pare un jeu potentiellement bloqu√©
   */
  public static async repairGame(gameId: string): Promise<boolean> {
    try {
      console.log(`üîß GameDebugger: Tentative de r√©paration du jeu ${gameId}`);
      
      // 1. V√©rifier la connexion socket
      let socket;
      try {
        socket = await SocketService.getInstanceAsync(true);
      } catch (socketError) {
        console.warn(`‚ö†Ô∏è Erreur d'obtention du socket:`, socketError);
        
        // Tenter la r√©cup√©ration d'urgence
        try {
          const { emergencyGameRecovery } = await import('./socketTester');
          await emergencyGameRecovery(gameId);
          socket = await SocketService.getInstanceAsync(true);
        } catch (recoveryError) {
          console.error(`‚ùå √âchec de r√©cup√©ration d'urgence:`, recoveryError);
        }
      }
      
      if (!socket || !socket.connected) {
        await SocketService.reconnect();
      }
      
      // 2. Rejoindre le canal du jeu √† nouveau
      try {
        await SocketService.joinGameChannel(gameId);
      } catch (joinError) {
        console.warn(`‚ö†Ô∏è Erreur lors de la jointure au canal:`, joinError);
        
        // Essayer avec reconnectToRoom qui est plus r√©silient
        await SocketService.reconnectToRoom(`game:${gameId}`, 3);
      }
      
      // 3. Forcer une v√©rification de phase
      const forceCheckSuccess = await SocketService.forcePhaseCheck(gameId);
      
      if (!forceCheckSuccess) {
        console.warn(`‚ö†Ô∏è √âchec du forcePhaseCheck, tentative via GameStateHelper`);
        await GameStateHelper.forceGameRecovery(gameId);
      }
      
      console.log(`‚úÖ GameDebugger: R√©paration du jeu ${gameId} termin√©e`);
      return true;
    } catch (error) {
      console.error(`‚ùå GameDebugger: Erreur lors de la r√©paration:`, error);
      return false;
    }
  }

  /**
   * Diagnostic complet du syst√®me de socket
   */
  public static async diagnosticSocketSystem(): Promise<void> {
    console.log(`üîç Diagnostic complet du syst√®me Socket.IO`);
    
    try {
      // 1. V√©rifier la configuration
      console.log(`üåê URL Socket configur√©e: ${SOCKET_URL}`);
      
      // 2. V√©rifier la connexion internet
      const netInfo = await NetInfo.fetch();
      console.log(`üåê √âtat de la connexion internet: ${netInfo.isConnected ? 'Connect√©' : 'D√©connect√©'} (${netInfo.type})`);
      
      if (!netInfo.isConnected) {
        console.error(`‚ùå Pas de connexion internet, impossible de continuer`);
        return;
      }
      
      // 3. V√©rifier l'√©tat actuel du socket
      const socketInstance = SocketService.getSocketInstance();
      console.log(`üîå √âtat actuel: ${socketInstance ? (socketInstance.connected ? 'Connect√©' : 'D√©connect√©') : 'Non initialis√©'}`);
      
      // 4. Tester une nouvelle connexion
      try {
        console.log(`üîÑ Test de nouvelle connexion...`);
        
        // Nettoyer compl√®tement le socket existant
        await SocketService.cleanup();
        
        // Activer l'auto-init et forcer une nouvelle connexion
        SocketService.setAutoInit(true);
        const socket = await SocketService.getInstanceAsync(true);
        
        console.log(`üîå Nouvelle connexion: ${socket.connected ? 'R√©ussie' : '√âchou√©e'}`);
        
        if (!socket.connected) {
          console.log(`üîÑ Tentative de connexion manuelle...`);
          socket.connect();
          
          // Attendre une courte p√©riode pour voir si la connexion r√©ussit
          await new Promise(r => setTimeout(r, 3000));
          console.log(`üîå √âtat apr√®s tentative manuelle: ${socket.connected ? 'Connect√©' : 'Toujours d√©connect√©'}`);
        }
      } catch (connectionError) {
        console.error(`‚ùå Erreur lors de la tentative de connexion:`, connectionError);
      }
      
      // 5. Diagnostic des services connexes
      try {
        console.log(`üîç Diagnostic de GameStateHelper...`);
        // V√©rifier l'√©tat du GameStateHelper
        console.log(`üóÑÔ∏è Cache GameStateHelper: ${GameStateHelper.hasCachedData() ? 'Disponible' : 'Vide'}`);
      } catch (helperError) {
        console.warn(`‚ö†Ô∏è Erreur lors du diagnostic de GameStateHelper:`, helperError);
      }
      
      console.log(`‚úÖ Diagnostic du syst√®me Socket.IO termin√©`);
    } catch (error) {
      console.error(`‚ùå Erreur lors du diagnostic socket:`, error);
    }
  }
}

// Exporter le service
export default GameDebugger.getInstance();
