import { Alert } from 'react-native';
import axios from 'axios';
import { API_URL, SOCKET_URL } from '@/config/axios';
import SocketService from '@/services/socketService';
import GameWebSocketService from '@/services/gameWebSocketService';
import UserIdManager from './userIdManager';

/**
 * Utilitaire de d√©bogage pour les jeux Cosmic Quest
 * Fournit des fonctions pour diagnostiquer et r√©soudre les probl√®mes de synchronisation
 */
class GameDebugger {
  private static instance: GameDebugger;

  /**
   * Obtenir l'instance singleton du GameDebugger
   */
  public static getInstance(): GameDebugger {
    if (!GameDebugger.instance) {
      GameDebugger.instance = new GameDebugger();
    }
    return GameDebugger.instance;
  }

  /**
   * V√©rifie l'√©tat complet du socket et du jeu
   */
  public async diagnoseGameState(gameId: string): Promise<void> {
    try {
      console.log(`üîç GameDebugger: Diagnostic du jeu ${gameId} en cours...`);
      
      // 1. V√©rifier l'√©tat du socket
      const socketState = await this.checkSocketState();
      
      // 2. V√©rifier l'√©tat du jeu via HTTP
      await this.checkGameStateHttp(gameId);
      
      // 3. V√©rifier l'√©tat du jeu via WebSocket
      await this.checkGameStateWebSocket(gameId);
      
      // 4. V√©rifier les phases entre le serveur et le client
      await this.checkPhaseConsistency(gameId);
      
      console.log(`‚úÖ GameDebugger: Diagnostic du jeu ${gameId} termin√©`);
    } catch (error) {
      console.error(`‚ùå GameDebugger: Erreur lors du diagnostic:`, error);
    }
  }

  /**
   * V√©rifie l'√©tat du socket
   */
  private async checkSocketState(): Promise<boolean> {
    try {
      const socket = await SocketService.getInstanceAsync();
      
      console.log(`üìä √âtat Socket:
        - Connect√©: ${socket.connected}
        - ID: ${socket.id || 'Non connect√©'}
        - URL: ${SOCKET_URL}
      `);
      
      return socket.connected;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification du socket:`, error);
      return false;
    }
  }

  /**
   * V√©rifie l'√©tat du jeu via HTTP
   */
  private async checkGameStateHttp(gameId: string): Promise<void> {
    try {
      const userId = await UserIdManager.getUserId();
      const response = await axios.get(`${API_URL}/games/${gameId}`, {
        headers: { userId: userId }
      });
      
      console.log(`üåê √âtat du jeu via HTTP:
        - Phase: ${response.data?.data?.game?.currentPhase}
        - Round: ${response.data?.data?.game?.currentRound}/${response.data?.data?.game?.totalRounds}
        - R√©ponses: ${response.data?.data?.answers?.length || 0}
      `);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification HTTP:`, error);
    }
  }

  /**
   * V√©rifie l'√©tat du jeu via WebSocket
   */
  private async checkGameStateWebSocket(gameId: string): Promise<void> {
    try {
      const userId = await UserIdManager.getUserId();
      const socket = await SocketService.getInstanceAsync();
      
      return new Promise((resolve) => {
        socket.emit('game:get_state', { gameId, userId }, (response: any) => {
          if (response?.success) {
            console.log(`üîå √âtat du jeu via WebSocket:
              - Phase: ${response.data?.game?.currentPhase}
              - Round: ${response.data?.game?.currentRound}/${response.data?.game?.totalRounds}
              - R√©ponses: ${response.data?.answers?.length || 0}
            `);
          } else {
            console.error(`‚ùå Erreur WebSocket:`, response?.error);
          }
          resolve();
        });
      });
    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification WebSocket:`, error);
    }
  }

  /**
   * V√©rifie la coh√©rence des phases entre le serveur et l'UI
   */
  private async checkPhaseConsistency(gameId: string): Promise<void> {
    try {
      // Utilisez GameWebSocketService pour obtenir l'√©tat actuel
      const state = await GameWebSocketService.getInstance().getGameState(gameId);
      
      // Analyse de la coh√©rence
      if (state) {
        console.log(`üß™ Analyse de coh√©rence des phases:
          - Phase serveur: ${state.game?.currentPhase}
          - Cible: ${state.currentUserState?.isTargetPlayer ? 'Oui' : 'Non'}
          - A r√©pondu: ${state.currentUserState?.hasAnswered ? 'Oui' : 'Non'}
          - A vot√©: ${state.currentUserState?.hasVoted ? 'Oui' : 'Non'}
        `);
        
        // D√©tecter les incoh√©rences potentielles
        const servPhase = state.game?.currentPhase;
        const isTarget = state.currentUserState?.isTargetPlayer;
        const hasAnswered = state.currentUserState?.hasAnswered;
        const hasVoted = state.currentUserState?.hasVoted;
        
        if (servPhase === 'answer' && hasAnswered && !isTarget) {
          console.warn(`‚ö†Ô∏è Incoh√©rence d√©tect√©e: Joueur a r√©pondu mais reste en phase answer`);
        }
        
        if (servPhase === 'vote' && hasVoted && isTarget) {
          console.warn(`‚ö†Ô∏è Incoh√©rence d√©tect√©e: Joueur cible a vot√© mais reste en phase vote`);
        }
      }
    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification de coh√©rence:`, error);
    }
  }

  /**
   * Force la v√©rification de phase c√¥t√© serveur
   */
  public async forceCheckPhase(gameId: string): Promise<void> {
    try {
      console.log(`üîÑ GameDebugger: For√ßage de v√©rification de phase pour le jeu ${gameId}`);
      
      const userId = await UserIdManager.getUserId();
      await axios.post(`${API_URL}/games/${gameId}/force-check-phase`, {
        user_id: userId
      });
      
      console.log(`‚úÖ V√©rification de phase forc√©e avec succ√®s`);
      
      // Attendre un peu puis v√©rifier l'√©tat mis √† jour
      setTimeout(() => this.diagnoseGameState(gameId), 1000);
    } catch (error) {
      console.error(`‚ùå Erreur lors du for√ßage de v√©rification:`, error);
      Alert.alert(
        "Erreur",
        "Impossible de forcer la v√©rification de phase. Veuillez r√©essayer."
      );
    }
  }

  /**
   * Tente de r√©parer un jeu bloqu√©
   */
  public async repairGame(gameId: string): Promise<boolean> {
    try {
      console.log(`üîß GameDebugger: Tentative de r√©paration du jeu ${gameId}`);
      
      // 1. Forcer la v√©rification de phase
      await this.forceCheckPhase(gameId);
      
      // 2. Rejoindre √† nouveau le canal du jeu
      const socket = await SocketService.getInstanceAsync();
      socket.emit('join-game', { gameId });
      
      // 3. Forcer une synchronisation compl√®te
      return await GameWebSocketService.getInstance().ensureSocketConnection(gameId);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©paration du jeu:`, error);
      return false;
    }
  }
}

export default GameDebugger.getInstance();
