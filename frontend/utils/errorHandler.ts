import { Alert } from 'react-native';
import NetInfo from '@react-native-community/netinfo';
import GameDebugger from './gameDebugger';
import SocketService from '@/services/socketService';

/**
 * Utilitaire pour g√©rer les erreurs li√©es aux WebSockets
 */
export const handleSocketError = async (error: any, context: string, gameId?: string): Promise<void> => {
  // Enregistrer l'erreur avec le contexte
  console.error(`‚ùå Erreur Socket (${context}):`, error);
  
  // V√©rifier la connexion internet
  const netInfo = await NetInfo.fetch();
  
  if (!netInfo.isConnected) {
    console.log('üåê Pas de connexion Internet d√©tect√©e');
    Alert.alert(
      'Probl√®me de connexion',
      'Vous semblez √™tre hors ligne. Veuillez v√©rifier votre connexion Internet.',
      [{ text: 'OK' }]
    );
    return;
  }
  
  // V√©rifier l'√©tat du socket
  let socketConnected = false;
  try {
    const socket = await SocketService.getInstanceAsync();
    socketConnected = socket.connected;
  } catch (socketError) {
    console.error('‚ùå Erreur lors de la v√©rification du socket:', socketError);
  }
  
  // D√©terminer le type d'erreur
  if (error.message?.includes('timeout')) {
    Alert.alert(
      'D√©lai d\'attente d√©pass√©',
      'Le serveur met trop de temps √† r√©pondre. Nous allons tenter de r√©tablir la connexion.',
      [{ text: 'OK' }]
    );
  } else if (error.message?.includes('socket') || !socketConnected) {
    Alert.alert(
      'Probl√®me de connexion',
      'La connexion temps r√©el est interrompue. Cela peut affecter la synchronisation du jeu.',
      [{ text: 'OK' }]
    );
  } else {
    // Erreurs g√©n√©riques
    const errorMessage = error.message || 'Une erreur inconnue est survenue';
    
    // Message simple sans options
    Alert.alert('Erreur', errorMessage, [{ text: 'OK' }]);
  }
};

/**
 * Utilitaire sp√©cifique pour g√©rer les erreurs de soumission de r√©ponse
 */
export const handleAnswerSubmissionError = async (error: any, gameId: string, retry?: () => Promise<void>): Promise<void> => {
  console.error(`‚ùå Erreur lors de la soumission de r√©ponse:`, error);
  
  // Messages sp√©cifiques selon le code d'erreur
  let message = 'Impossible d\'envoyer votre r√©ponse.';
  
  if (error.response?.status === 409) {
    message = 'Vous avez d√©j√† soumis une r√©ponse √† cette question.';
  } else if (error.response?.status === 400 && error.response?.data?.code === 'TARGET_PLAYER_CANNOT_ANSWER') {
    message = 'Vous √™tes la cible de cette question et ne pouvez pas y r√©pondre.';
  } else if (error.message?.includes('Network Error')) {
    return handleSocketError(error, 'submit-answer', gameId);
  } else if (error.response?.data?.error) {
    message = error.response.data.error;
  }
  
  Alert.alert('Erreur', message, [{ text: 'OK' }]);
};

/**
 * Utilitaire pour la r√©cup√©ration d'erreurs critique avec r√©initialisation WebSocket
 */
export const handleCriticalError = async (error: any, context: string, gameId?: string): Promise<void> => {
  console.error(`üö® ERREUR CRITIQUE (${context}):`, error);
  
  // Tenter une r√©initialisation compl√®te de la connexion
  try {
    console.log('üîÑ Tentative de r√©initialisation WebSocket...');
    await SocketService.reset();
    
    // Se reconnecter au jeu si un ID est fourni
    if (gameId) {
      await GameDebugger.repairGame(gameId);
    }
    
    Alert.alert(
      'R√©cup√©ration r√©ussie',
      'La connexion a √©t√© r√©initialis√©e avec succ√®s.'
    );
  } catch (resetError) {
    console.error('‚ùå √âchec de r√©initialisation:', resetError);
    
    Alert.alert(
      'Erreur critique',
      'Une erreur grave est survenue. Essayez de quitter et red√©marrer l\'application.',
      [{ text: 'OK' }]
    );
  }
};

/**
 * Gestionnaire global d'erreurs non capt√©es
 */
export const setupGlobalErrorHandlers = () => {
  // Erreurs non g√©r√©es pour les promesses
  const originalUnhandledRejection = global.ErrorUtils.getGlobalHandler();
  
  global.ErrorUtils.setGlobalHandler((error, isFatal) => {
    console.error(`‚ùå ERREUR ${isFatal ? 'FATALE' : 'NON FATALE'} NON G√âR√âE:`, error);
    
    // Pour les erreurs li√©es aux sockets, utiliser notre gestionnaire sp√©cialis√©
    if (error.message?.includes('socket') || error.message?.includes('WebSocket')) {
      handleSocketError(error, 'non g√©r√©e').catch(console.error);
    }
    
    // Appeler le gestionnaire original
    originalUnhandledRejection(error, isFatal);
  });
  
  console.log('‚úÖ Gestionnaire global d\'erreurs configur√©');
};

export default {
  handleSocketError,
  handleAnswerSubmissionError,
  handleCriticalError,
  setupGlobalErrorHandlers
};
