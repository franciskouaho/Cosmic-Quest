import { Alert } from 'react-native';
import NetInfo from '@react-native-community/netinfo';

/**
 * Utilitaire pour g√©rer les erreurs li√©es aux WebSockets
 */
export const handleSocketError = async (error: any, context: string): Promise<void> => {
  // Enregistrer l'erreur avec le contexte
  console.error(`‚ùå Erreur Socket (${context}):`, error);
  
  // V√©rifier la connexion internet
  const netInfo = await NetInfo.fetch();
  
  if (!netInfo.isConnected) {
    console.log('üåê Pas de connexion Internet d√©tect√©e');
    Alert.alert(
      'Probl√®me de connexion',
      'Vous semblez √™tre hors ligne. Veuillez v√©rifier votre connexion Internet.',
      [{ text: 'OK' }]
    );
    return;
  }
  
  // D√©terminer le type d'erreur
  if (error.message?.includes('timeout')) {
    Alert.alert(
      'D√©lai d\'attente d√©pass√©',
      'Le serveur met trop de temps √† r√©pondre. Veuillez r√©essayer.',
      [{ text: 'OK' }]
    );
  } else if (error.message?.includes('socket')) {
    // Pas d'alerte pour les erreurs de socket standards pour √©viter de spammer l'utilisateur
    console.warn('‚ö†Ô∏è Probl√®me de connexion WebSocket:', error.message);
  } else {
    // Pour les erreurs inconnues, afficher un message g√©n√©rique
    console.error('‚ùå Erreur non g√©r√©e:', error);
  }
};

/**
 * Gestionnaire global d'erreurs non capt√©es
 */
export const setupGlobalErrorHandlers = () => {
  // Erreurs non g√©r√©es pour les promesses
  const originalUnhandledRejection = global.ErrorUtils.getGlobalHandler();
  
  global.ErrorUtils.setGlobalHandler((error, isFatal) => {
    console.error(`‚ùå ERREUR ${isFatal ? 'FATALE' : 'NON FATALE'} NON G√âR√âE:`, error);
    
    // Pour les erreurs li√©es aux sockets, utiliser notre gestionnaire sp√©cialis√©
    if (error.message?.includes('socket') || error.message?.includes('WebSocket')) {
      handleSocketError(error, 'non g√©r√©e').catch(console.error);
    }
    
    // Appeler le gestionnaire original
    originalUnhandledRejection(error, isFatal);
  });
  
  console.log('‚úÖ Gestionnaire global d\'erreurs configur√©');
};

export default {
  handleSocketError,
  setupGlobalErrorHandlers
};
