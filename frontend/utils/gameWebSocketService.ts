import SocketService from '@/services/socketService';
import UserIdManager from '@/utils/userIdManager';

class GameWebSocketService {
  /**
   * Rejoint le canal de jeu avec Socket.IO
   */
  async joinGameChannel(gameId: string): Promise<boolean> {
    try {
      console.log(`üéÆ GameWebSocketService: Tentative de rejoindre le canal de jeu ${gameId}`);
      
      // Nous activons l'initialisation automatique des sockets pour les jeux
      SocketService.setAutoInit(true);
      
      // R√©cup√©rer une instance du socket (avec forceInit=true pour s'assurer qu'elle est disponible)
      const socket = await SocketService.getInstanceAsync(true);
      
      if (!socket) {
        console.error('‚ùå Socket non disponible apr√®s tentative d\'initialisation');
        return false;
      }
      
      return new Promise((resolve) => {
        // D√©finir un d√©lai d'attente
        const timeout = setTimeout(() => {
          console.error(`‚è±Ô∏è D√©lai d'attente d√©pass√© pour rejoindre le jeu ${gameId}`);
          resolve(false);
        }, 5000);
        
        // √âmettre l'√©v√©nement pour rejoindre le jeu
        socket.emit('join-game', { gameId }, (response: any) => {
          clearTimeout(timeout);
          
          if (response && response.success !== false) {
            console.log(`‚úÖ Jeu ${gameId} rejoint avec succ√®s`);
            resolve(true);
          } else {
            console.warn(`‚ö†Ô∏è √âchec de rejoindre le jeu ${gameId}:`, response?.error || 'Raison inconnue');
            resolve(false);
          }
        });
      });
    } catch (error) {
      console.error(`‚ùå Erreur lors de la tentative de rejoindre le jeu ${gameId}:`, error);
      return false;
    }
  }
  
  /**
   * Quitte le canal de jeu avec Socket.IO
   */
  async leaveGameChannel(gameId: string): Promise<boolean> {
    try {
      console.log(`üéÆ GameWebSocketService: Tentative de quitter le canal de jeu ${gameId}`);
      
      // On v√©rifie d'abord si le socket est connect√©
      if (!SocketService.isConnected()) {
        console.log(`‚ÑπÔ∏è Socket d√©j√† d√©connect√©, rien √† faire pour quitter ${gameId}`);
        return true;
      }
      
      const socket = SocketService.getSocketInstance();
      if (!socket) {
        console.warn('‚ö†Ô∏è Socket non disponible, consid√©r√© comme d√©j√† quitt√©');
        return true;
      }
      
      return new Promise((resolve) => {
        // D√©finir un d√©lai d'attente
        const timeout = setTimeout(() => {
          console.warn(`‚ö†Ô∏è Timeout lors de la tentative de quitter le jeu ${gameId}`);
          resolve(false);
        }, 5000);
        
        // √âmettre l'√©v√©nement pour quitter le jeu
        socket.emit('leave-game', { gameId }, (response: any) => {
          clearTimeout(timeout);
          
          if (response && response.success !== false) {
            console.log(`‚úÖ Jeu ${gameId} quitt√© avec succ√®s`);
            resolve(true);
          } else {
            console.warn(`‚ö†Ô∏è √âchec de quitter le jeu ${gameId}:`, response?.error || 'Raison inconnue');
            resolve(false);
          }
        });
      });
    } catch (error) {
      console.error(`‚ùå Erreur lors de la tentative de quitter le jeu ${gameId}:`, error);
      return false;
    }
  }
  
  /**
   * V√©rifie si l'utilisateur est l'h√¥te du jeu
   */
  async isUserHost(gameId: string): Promise<boolean> {
    try {
      console.log(`üéÆ GameWebSocketService: V√©rification si l'utilisateur est l'h√¥te du jeu ${gameId}`);
      
      // R√©cup√©rer l'ID utilisateur
      const userId = await UserIdManager.getUserId();
      if (!userId) {
        console.error('‚ùå ID utilisateur non disponible');
        return false;
      }
      
      // Si le socket n'est pas connect√©, on ne peut pas v√©rifier
      if (!SocketService.isConnected()) {
        console.warn('‚ö†Ô∏è Socket non connect√©, impossible de v√©rifier le statut d\'h√¥te');
        return false;
      }
      
      const socket = SocketService.getSocketInstance();
      if (!socket) {
        console.warn('‚ö†Ô∏è Socket non disponible, impossible de v√©rifier le statut d\'h√¥te');
        return false;
      }
      
      return new Promise((resolve) => {
        // D√©finir un d√©lai d'attente
        const timeout = setTimeout(() => {
          console.warn(`‚ö†Ô∏è Timeout lors de la v√©rification du statut d'h√¥te pour ${gameId}`);
          resolve(false);
        }, 5000);
        
        // √âmettre l'√©v√©nement pour v√©rifier si l'utilisateur est l'h√¥te
        socket.emit('game:check_host', { gameId, userId }, (response: any) => {
          clearTimeout(timeout);
          resolve(response?.isHost || false);
        });
      });
    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification du statut d'h√¥te:`, error);
      return false;
    }
  }
}

export default new GameWebSocketService();
