import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform } from 'react-native';

/**
 * Service de gestion de l'ID utilisateur
 * Centralise l'acc√®s √† l'ID utilisateur √† travers l'application
 */
class UserIdManager {
  private userId: string | null = null;
  private initialized = false;

  /**
   * D√©finit l'ID utilisateur et le stocke dans AsyncStorage
   * @param userId ID de l'utilisateur
   */
  async setUserId(userId: string | number): Promise<void> {
    try {
      // Convertir en string si n√©cessaire
      const userIdStr = String(userId);
      this.userId = userIdStr;
      
      // Stocker dans AsyncStorage
      await AsyncStorage.setItem('@user_id', userIdStr);
      
      console.log(`üë§ UserIdManager: ID utilisateur d√©fini: ${userIdStr}`);
      this.initialized = true;
      
      return;
    } catch (error) {
      console.error('‚ùå UserIdManager: Erreur lors de la d√©finition de l\'ID utilisateur:', error);
      throw error;
    }
  }

  /**
   * R√©cup√®re l'ID utilisateur depuis la m√©moire ou AsyncStorage
   * @returns ID de l'utilisateur ou null si non d√©fini
   */
  async getUserId(): Promise<string | null> {
    try {
      // Si d√©j√† en m√©moire, renvoyer directement
      if (this.userId) {
        return this.userId;
      }
      
      // Sinon, tenter de r√©cup√©rer depuis AsyncStorage
      const storedId = await AsyncStorage.getItem('@user_id');
      
      if (storedId) {
        this.userId = storedId;
        this.initialized = true;
        console.log(`üë§ UserIdManager: ID utilisateur r√©cup√©r√©: ${storedId}`);
      } else {
        console.log('üë§ UserIdManager: Aucun ID utilisateur stock√©');
      }
      
      return storedId;
    } catch (error) {
      console.error('‚ùå UserIdManager: Erreur lors de la r√©cup√©ration de l\'ID utilisateur:', error);
      return null;
    }
  }

  /**
   * Supprime l'ID utilisateur
   */
  async clearUserId(): Promise<void> {
    try {
      this.userId = null;
      await AsyncStorage.removeItem('@user_id');
      console.log('üë§ UserIdManager: ID utilisateur supprim√©');
    } catch (error) {
      console.error('‚ùå UserIdManager: Erreur lors de la suppression de l\'ID utilisateur:', error);
    }
  }

  /**
   * V√©rifie si un ID utilisateur est d√©fini
   */
  async hasUserId(): Promise<boolean> {
    const id = await this.getUserId();
    return id !== null;
  }
  
  /**
   * Synchronise l'ID utilisateur entre AsyncStorage et les headers API
   * Fonction sp√©cifiquement demand√©e par le syst√®me
   */
  async syncUserId(api: any): Promise<string | null> {
    try {
      // R√©cup√©rer l'ID depuis AsyncStorage
      const userId = await this.getUserId();
      
      // Si un userId est disponible, le d√©finir dans les en-t√™tes de l'API
      if (userId && api?.defaults?.headers) {
        api.defaults.headers.userId = userId;
        console.log(`üë§ UserIdManager: ID utilisateur ${userId} synchronis√© avec les en-t√™tes API`);
      } else if (!userId) {
        console.warn('‚ö†Ô∏è UserIdManager: Aucun ID utilisateur √† synchroniser');
      }
      
      return userId;
    } catch (error) {
      console.error('‚ùå UserIdManager: Erreur lors de la synchronisation de l\'ID utilisateur:', error);
      return null;
    }
  }

  /**
   * R√©cup√®re le UserID de mani√®re synchrone (sans garantie qu'il soit √† jour)
   * Utile dans les contextes o√π async/await n'est pas possible
   */
  getUserIdSync(): string | null {
    return this.userId;
  }

  /**
   * V√©rifie si le gestionnaire a √©t√© initialis√©
   */
  isInitialized(): boolean {
    return this.initialized;
  }
  
  /**
   * Affiche les informations de d√©bogage sur les IDs utilisateur
   * dans diff√©rents contextes de l'application
   * @returns Promise avec les informations de d√©bogage
   */
  async debugUserIds(): Promise<Record<string, any>> {
    try {
      // R√©cup√©rer les IDs depuis diff√©rentes sources
      const memoryId = this.userId;
      const asyncStorageId = await AsyncStorage.getItem('@user_id');
      const userDataString = await AsyncStorage.getItem('@user_data');
      const userData = userDataString ? JSON.parse(userDataString) : null;
      const userDataId = userData?.id || null;
      const currentUserId = await AsyncStorage.getItem('@current_user_id');
      
      // Cr√©er l'objet de diagnostic
      const debugInfo = {
        memoryId,
        asyncStorageId,
        userDataId,
        currentUserId,
        initialized: this.initialized,
        platform: Platform.OS,
        timestamp: new Date().toISOString(),
      };
      
      console.log('üîç Debug UserIDs:', debugInfo);
      
      // D√©tecter les incoh√©rences
      const uniqueIds = new Set([memoryId, asyncStorageId, userDataId, currentUserId].filter(Boolean));
      if (uniqueIds.size > 1) {
        console.warn('‚ö†Ô∏è Incoh√©rence d√©tect√©e entre les IDs utilisateur:', Array.from(uniqueIds));
        
        // Tenter de r√©soudre en donnant priorit√© √† memoryId puis √† userDataId
        const prioritizedId = memoryId || userDataId || asyncStorageId || currentUserId;
        
        if (prioritizedId) {
          console.log(`üîß Tentative d'uniformisation avec ID: ${prioritizedId}`);
          await this.setUserId(prioritizedId);
        }
      }
      
      return debugInfo;
    } catch (error) {
      console.error('‚ùå Erreur lors du d√©bogage des IDs utilisateur:', error);
      return {
        error: error.message || 'Erreur inconnue',
        timestamp: new Date().toISOString()
      };
    }
  }
}

// Exporter une instance singleton
export default new UserIdManager();
