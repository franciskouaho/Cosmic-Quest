import axios from 'axios';
import SocketService from '@/services/socketService';
import { SOCKET_URL, API_URL } from '@/config/axios';
import UserIdManager from './userIdManager';
import GameWebSocketService from '@/services/gameWebSocketService';
import { Alert } from 'react-native';

/**
 * Utilitaire pour tester la connexion WebSocket
 */
export const testSocketConnection = async () => {
  console.log('üß™ D√©marrage du test de connexion WebSocket...');
  
  try {
    // Utiliser la m√©thode asynchrone pour obtenir une instance valide
    const socket = await SocketService.getInstanceAsync();
    
    console.log(`üîå URL WebSocket: ${SOCKET_URL}`);
    console.log(`üîå Socket ID: ${socket.id || 'non connect√©'}`);
    console.log(`üîå √âtat de connexion: ${socket.connected ? 'connect√©' : 'd√©connect√©'}`);
    
    // V√©rifier d'abord si le socket est connect√© avant d'ajouter des √©couteurs
    if (!socket.connected) {
      console.log('‚ö†Ô∏è Socket non connect√©, attente de connexion...');
      return false;
    }
    
    // Ajouter un √©couteur temporaire pour les messages de test
    socket.on('pong', (data) => {
      console.log('‚úÖ R√©ponse ping re√ßue:', data);
    });
    
    // Envoyer un ping pour tester la communication bidirectionnelle
    console.log('üèì Envoi d\'un ping au serveur...');
    socket.emit('ping', (response) => {
      console.log('‚úÖ R√©ponse ping (callback) re√ßue:', response);
    });
    
    // Nettoyer les √©couteurs apr√®s 5 secondes
    setTimeout(() => {
      if (socket.connected) {
        socket.off('pong');
        console.log('üßπ √âcouteurs nettoy√©s');
      }
    }, 5000);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test de connexion WebSocket:', error);
    return false;
  }
};

/**
 * Teste la soumission d'une r√©ponse via WebSocket, avec repli vers HTTP en cas d'√©chec
 * @param gameId ID de la partie
 * @param questionId ID de la question
 * @param content Contenu de la r√©ponse
 * @returns {Promise<boolean>} true si la soumission a r√©ussi, false sinon
 */
export const testSubmitAnswer = async (
  gameId: string | number, 
  questionId: string | number, 
  content: string
): Promise<boolean> => {
  console.log(`üß™ Test de soumission de r√©ponse - Game: ${gameId}, Question: ${questionId}`);
  
  try {
    // R√©cup√©rer l'ID utilisateur
    const userId = await UserIdManager.getUserId();
    if (!userId) {
      console.error('‚ùå ID utilisateur non disponible pour le test');
      return false;
    }
    
    // 1. Essayer d'abord via WebSocket
    console.log('üîå Tentative via WebSocket...');
    try {
      const socket = await SocketService.getInstanceAsync();
      
      if (!socket.connected) {
        throw new Error('Socket non connect√©');
      }
      
      return new Promise((resolve) => {
        // D√©finir un timeout pour limiter l'attente
        const timeout = setTimeout(() => {
          console.warn('‚ö†Ô∏è Timeout WebSocket atteint, fallback vers HTTP...');
          resolve(false);
        }, 3000);
        
        // Tentative via WebSocket
        socket.emit('game:submit_answer', {
          gameId,
          questionId,
          content,
          userId
        }, (response: any) => {
          clearTimeout(timeout);
          
          if (response?.success) {
            console.log('‚úÖ R√©ponse soumise avec succ√®s via WebSocket');
            resolve(true);
          } else {
            console.warn('‚ö†Ô∏è √âchec de soumission via WebSocket:', response?.error);
            resolve(false);
          }
        });
      });
    } catch (wsError) {
      console.warn('‚ö†Ô∏è Erreur WebSocket:', wsError.message);
      // Continuer avec HTTP en cas d'erreur WebSocket
    }
    
    // 2. Fallback: Essayer via HTTP REST
    console.log('üåê Tentative via HTTP REST...');
    const response = await axios.post(`${API_URL}/games/${gameId}/answer`, {
      question_id: questionId,
      content,
      user_id: userId
    }, {
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'userId': userId
      }
    });
    
    console.log('‚úÖ R√©ponse soumise avec succ√®s via HTTP');
    
    // 3. Attendre une synchronisation
    setTimeout(async () => {
      // Forcer une mise √† jour de l'√©tat du jeu
      await GameWebSocketService.getInstance().getGameState(String(gameId), true);
    }, 1000);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test de soumission de r√©ponse:', error);
    return false;
  }
};

/**
 * V√©rifie si un jeu semble bloqu√© et tente de d√©bloquer
 * @param gameId ID de la partie √† v√©rifier
 * @returns {Promise<boolean>} true si une action de d√©blocage a √©t√© tent√©e
 */
export const checkAndUnblockGame = async (gameId: string): Promise<boolean> => {
  try {
    console.log(`üîç V√©rification de blocage pour le jeu ${gameId}...`);
    
    // R√©cup√©rer l'√©tat complet du jeu
    const gameState = await GameWebSocketService.getInstance().getGameState(gameId, true);
    
    if (!gameState) {
      console.error("‚ùå Impossible de r√©cup√©rer l'√©tat du jeu");
      return false;
    }
    
    const { game, answers, currentQuestion, players } = gameState;
    
    // V√©rifier si nous sommes potentiellement bloqu√©s en phase answer
    if (game?.currentPhase === 'answer') {
      // Compter combien de joueurs peuvent r√©pondre (tous sauf la cible)
      const nonTargetPlayers = players.filter(p => 
        p.id !== String(currentQuestion?.targetPlayer?.id)
      ).length;
      
      // Compter les r√©ponses d√©j√† soumises
      const answersSubmitted = answers?.length || 0;
      
      console.log(`üîç Phase answer: ${answersSubmitted}/${nonTargetPlayers} r√©ponses soumises`);
      
      // Si toutes les r√©ponses sont soumises mais nous sommes toujours en phase answer
      if (answersSubmitted >= nonTargetPlayers && nonTargetPlayers > 0) {
        console.log(`‚ö†Ô∏è Blocage potentiel d√©tect√©: Toutes les r√©ponses soumises mais toujours en phase answer`);
        
        // Tenter de forcer une v√©rification de phase sur le serveur
        await GameWebSocketService.getInstance().forceCheckPhase(gameId);
        console.log(`üîÑ Tentative de d√©blocage effectu√©e pour le jeu ${gameId}`);
        return true;
      }
    }
    
    // V√©rifier si nous sommes potentiellement bloqu√©s en phase vote
    if (game?.currentPhase === 'vote') {
      // V√©rifier si le temps √©coul√© est excessif (plus de 2 minutes)
      const currentTime = Date.now();
      const phaseStartTime = game?.phaseStartTime || 0;
      
      if (phaseStartTime && (currentTime - phaseStartTime > 120000)) {
        console.log(`‚ö†Ô∏è Blocage potentiel d√©tect√©: Phase vote active depuis plus de 2 minutes`);
        
        // Tenter de forcer une v√©rification de phase sur le serveur
        await GameWebSocketService.getInstance().forceCheckPhase(gameId);
        console.log(`üîÑ Tentative de d√©blocage effectu√©e pour le jeu ${gameId}`);
        return true;
      }
    }
    
    console.log(`‚úÖ Aucun blocage d√©tect√© pour le jeu ${gameId}`);
    return false;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la v√©rification de blocage:`, error);
    return false;
  }
};
