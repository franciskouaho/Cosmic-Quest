import SocketService from '@/services/socketService';
import { SOCKET_URL } from '@/config/axios';

/**
 * Utilitaire pour tester la connexion WebSocket
 */
export const testSocketConnection = () => {
  console.log('üß™ D√©marrage du test de connexion WebSocket...');
  
  try {
    const socket = SocketService.getInstance();
    
    console.log(`üîå URL WebSocket: ${SOCKET_URL}`);
    console.log(`üîå Socket ID: ${socket.id || 'non connect√©'}`);
    console.log(`üîå √âtat de connexion: ${socket.connected ? 'connect√©' : 'd√©connect√©'}`);
    
    // Ajouter un √©couteur temporaire pour les messages de test
    socket.on('pong', (data) => {
      console.log('‚úÖ R√©ponse ping re√ßue:', data);
    });
    
    // Envoyer un ping pour tester la communication bidirectionnelle
    console.log('üèì Envoi d\'un ping au serveur...');
    socket.emit('ping', (response) => {
      console.log('‚úÖ R√©ponse ping (callback) re√ßue:', response);
    });
    
    // Tester la tentative de rejoindre une salle test
    console.log('üö™ Test de jointure √† une salle test...');
    SocketService.joinRoom('test-room');
    
    // Ajouter un √©couteur temporaire pour confirmer la jointure
    socket.on('room:joined', (data) => {
      console.log('‚úÖ Confirmation de jointure √† la salle:', data);
      
      // Apr√®s confirmation, tester le d√©part
      console.log('üö™ Test de d√©part de la salle test...');
      SocketService.leaveRoom('test-room');
    });
    
    // Ajouter un √©couteur temporaire pour confirmer le d√©part
    socket.on('room:left', (data) => {
      console.log('‚úÖ Confirmation de d√©part de la salle:', data);
    });
    
    // √âcouter les √©v√©nements de jeu pour le d√©bogage
    socket.on('game:update', (data) => {
      console.log('üéÆ √âv√©nement game:update re√ßu:', data);
    });

    // √âcouter les √©v√©nements de phase
    socket.on('phase_change', (data) => {
      console.log('üîÑ √âv√©nement phase_change re√ßu:', data);
    });
    
    // Nettoyer les √©couteurs apr√®s 5 secondes
    setTimeout(() => {
      socket.off('pong');
      socket.off('room:joined');
      socket.off('room:left');
      // Ne pas supprimer les √©couteurs de d√©bogage du jeu pour suivre la partie
      console.log('üßπ Nettoyage des √©couteurs de test termin√©');
    }, 5000);
    
    return true;
  } catch (error) {
    console.error('‚ùå Test √©chou√©:', error);
    return false;
  }
};

/**
 * V√©rifier l'√©tat de la connexion WebSocket
 * @returns Un objet contenant l'√©tat actuel de la connexion
 */
export const checkSocketStatus = () => {
  try {
    const socket = SocketService.getInstance();
    return {
      isConnected: socket.connected,
      socketId: socket.id || null,
      transport: socket.io?.engine?.transport?.name || null,
      url: SOCKET_URL,
    };
  } catch (error) {
    return {
      isConnected: false,
      error: error.message,
      url: SOCKET_URL,
    };
  }
};

/**
 * Diagnostic avanc√© des √©v√©nements de jeu
 * Utile pour le d√©bogage des parties en cours
 * @param gameId ID de la partie √† surveiller
 */
export const monitorGameEvents = (gameId) => {
  try {
    const socket = SocketService.getInstance();
    console.log(`üîç D√©marrage du monitoring pour le jeu ${gameId}...`);
    
    // Rejoindre le canal de la partie
    SocketService.joinRoom(`game:${gameId}`);
    
    // √âcouter les √©v√©nements de mise √† jour de la partie
    socket.on('game:update', (data) => {
      console.log(`üìä [Jeu ${gameId}] Mise √† jour:`, data);
    });
    
    // √âcouter les √©v√©nements d'erreur
    socket.on('error', (error) => {
      console.error(`‚ùå [Jeu ${gameId}] Erreur:`, error);
    });
    
    console.log(`‚úÖ Monitoring actif pour le jeu ${gameId}`);
    return true;
  } catch (error) {
    console.error('‚ùå √âchec du monitoring:', error);
    return false;
  }
};

export default {
  testSocketConnection,
  checkSocketStatus,
  monitorGameEvents,
};
