import SocketService from '@/services/socketService';
import { SOCKET_URL } from '@/config/axios';

/**
 * Utilitaire pour tester la connexion WebSocket
 */
export const testSocketConnection = async () => {
  console.log('üß™ D√©marrage du test de connexion WebSocket...');
  
  try {
    // Utiliser la m√©thode asynchrone pour obtenir une instance valide
    const socket = await SocketService.getInstanceAsync();
    
    console.log(`üîå URL WebSocket: ${SOCKET_URL}`);
    console.log(`üîå Socket ID: ${socket.id || 'non connect√©'}`);
    console.log(`üîå √âtat de connexion: ${socket.connected ? 'connect√©' : 'd√©connect√©'}`);
    
    // V√©rifier d'abord si le socket est connect√© avant d'ajouter des √©couteurs
    if (!socket.connected) {
      console.log('‚ö†Ô∏è Socket non connect√©, attente de connexion...');
      return false;
    }
    
    // Ajouter un √©couteur temporaire pour les messages de test
    socket.on('pong', (data) => {
      console.log('‚úÖ R√©ponse ping re√ßue:', data);
    });
    
    // Envoyer un ping pour tester la communication bidirectionnelle
    console.log('üèì Envoi d\'un ping au serveur...');
    socket.emit('ping', (response) => {
      console.log('‚úÖ R√©ponse ping (callback) re√ßue:', response);
    });
    
    // Tester la tentative de rejoindre une salle test
    console.log('üö™ Test de jointure √† une salle test...');
    await SocketService.joinRoom('test-room');
    
    // Ajouter un √©couteur temporaire pour confirmer la jointure
    socket.on('room:joined', (data) => {
      console.log('‚úÖ Confirmation de jointure √† la salle:', data);
      
      // Apr√®s confirmation, tester le d√©part
      console.log('üö™ Test de d√©part de la salle test...');
      SocketService.leaveRoom('test-room');
    });
    
    // Ajouter un √©couteur temporaire pour confirmer le d√©part
    socket.on('room:left', (data) => {
      console.log('‚úÖ Confirmation de d√©part de la salle:', data);
    });
    
    // √âcouter les √©v√©nements de jeu pour le d√©bogage
    socket.on('game:update', (data) => {
      console.log('üéÆ √âv√©nement game:update re√ßu:', data);
      
      // Ajouter une validation sp√©cifique pour le statut de joueur cibl√©
      if (data.type === 'phase_change' && data.phase === 'vote') {
        console.log('üß™ Test de validation du joueur cibl√©...');
        const currentQuestion = socket?.gameState?.currentQuestion;
        const currentUser = socket?.userData?.id;
        
        if (currentQuestion && currentUser) {
          const isTarget = currentQuestion.targetPlayer?.id === currentUser;
          console.log(`üéØ Statut de joueur cibl√©: ${isTarget ? 'OUI' : 'NON'}`);
          if (isTarget) {
            console.log('‚ö†Ô∏è D√©tection de joueur cibl√©: cet utilisateur est la cible et devrait avoir une interface sp√©ciale');
          }
        }
      }
    });

    // √âcouter les √©v√©nements de phase
    socket.on('phase_change', (data) => {
      console.log('üîÑ √âv√©nement phase_change re√ßu:', data);
    });
    
    // Nettoyer les √©couteurs apr√®s 5 secondes
    setTimeout(() => {
      if (socket.connected) {
        socket.off('pong');
        socket.off('room:joined');
        socket.off('room:left');
        // Ne pas supprimer les √©couteurs de d√©bogage du jeu pour suivre la partie
        console.log('üßπ Nettoyage des √©couteurs de test termin√©');
      }
    }, 5000);
    
    return true;
  } catch (error) {
    console.error('‚ùå Test √©chou√©:', error);
    return false;
  }
};

/**
 * V√©rifier l'√©tat de la connexion WebSocket
 * @returns Un objet contenant l'√©tat actuel de la connexion
 */
export const checkSocketStatus = async () => {
  try {
    // Obtenir le diagnostic complet du service
    const diagnostic = SocketService.diagnose();
    
    // Si d√©connect√©, tenter une initialisation √† la vol√©e
    if (diagnostic.status !== 'connected') {
      console.log('üîå Socket non connect√©, tentative d\'initialisation...');
      try {
        const socket = await SocketService.getInstanceAsync();
        return {
          isConnected: socket.connected,
          socketId: socket.id || null,
          transport: socket.io?.engine?.transport?.name || null,
          url: SOCKET_URL,
          reconnection: true
        };
      } catch (initError) {
        console.error('‚ùå √âchec de l\'initialisation du socket:', initError);
      }
    }
    
    return {
      isConnected: diagnostic.details.connected,
      socketId: diagnostic.details.socketId,
      transport: diagnostic.details.transport,
      url: SOCKET_URL,
      ...diagnostic.details
    };
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification du statut socket:', error);
    return {
      isConnected: false,
      error: error.message,
      url: SOCKET_URL,
    };
  }
};

/**
 * Diagnostic avanc√© des √©v√©nements de jeu
 * Utile pour le d√©bogage des parties en cours
 * @param gameId ID de la partie √† surveiller
 */
export const monitorGameEvents = async (gameId) => {
  try {
    const socket = await SocketService.getInstanceAsync();
    console.log(`üîç D√©marrage du monitoring pour le jeu ${gameId}...`);
    
    // Rejoindre le canal de la partie
    await SocketService.joinRoom(`game:${gameId}`);
    
    // √âcouter les √©v√©nements de mise √† jour de la partie
    socket.on('game:update', (data) => {
      console.log(`üìä [Jeu ${gameId}] Mise √† jour:`, data);
    });
    
    // √âcouter les √©v√©nements d'erreur
    socket.on('error', (error) => {
      console.error(`‚ùå [Jeu ${gameId}] Erreur:`, error);
    });
    
    console.log(`‚úÖ Monitoring actif pour le jeu ${gameId}`);
    return true;
  } catch (error) {
    console.error('‚ùå √âchec du monitoring:', error);
    return false;
  }
};

/**
 * Outils de diagnostic pour les situations de joueur cibl√©
 * @param gameId ID de la partie
 */
export const testTargetPlayerScenario = async (gameId: string) => {
  try {
    const socket = await SocketService.getInstanceAsync();
    console.log(`üîç D√©marrage du test de sc√©nario 'joueur cibl√©' pour le jeu ${gameId}...`);
    
    // √âcouter sp√©cifiquement les mises √† jour qui contiennent des informations sur le joueur cibl√©
    socket.on('game:update', (data) => {
      if (data.question && data.question.targetPlayer) {
        console.log(`üéØ Joueur cibl√© d√©tect√©: ${data.question.targetPlayer.displayName || data.question.targetPlayer.username} (ID: ${data.question.targetPlayer.id})`);
        
        // V√©rifier si le joueur actuel est la cible
        if (socket.userData && socket.userData.id === data.question.targetPlayer.id) {
          console.log('‚ö†Ô∏è VOUS √™tes le joueur cibl√© pour cette question!');
          console.log('‚úÖ Comportement attendu: Vous ne devriez PAS pouvoir r√©pondre √† cette question.');
        }
      }
    });
    
    console.log(`‚úÖ Test de sc√©nario 'joueur cibl√©' activ√© pour le jeu ${gameId}`);
    return true;
  } catch (error) {
    console.error('‚ùå √âchec du test de sc√©nario:', error);
    return false;
  }
};

export default {
  testSocketConnection,
  checkSocketStatus,
  monitorGameEvents,
  testTargetPlayerScenario,
};
