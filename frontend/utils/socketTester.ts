import axios from 'axios';
import SocketService from '@/services/socketService';
import { SOCKET_URL, API_URL } from '@/config/axios';
import UserIdManager from './userIdManager';
import GameWebSocketService from '@/services/gameWebSocketService';
import gameService from '@/services/queries/game';
import { Alert } from 'react-native';

/**
 * Utilitaire pour tester la connexion WebSocket
 */
export const testSocketConnection = async () => {
  console.log('üß™ D√©marrage du test de connexion WebSocket...');
  
  try {
    // Utiliser la m√©thode asynchrone pour obtenir une instance valide
    const socket = await SocketService.getInstanceAsync();
    
    console.log(`üîå URL WebSocket: ${SOCKET_URL}`);
    console.log(`üîå Socket ID: ${socket.id || 'non connect√©'}`);
    console.log(`üîå √âtat de connexion: ${socket.connected ? 'connect√©' : 'd√©connect√©'}`);
    
    if (!socket.connected) {
      console.log('‚ö†Ô∏è Socket non connect√©, attente de connexion...');
      return false;
    }
    
    // Ajouter un √©couteur temporaire pour les messages de test
    socket.on('pong', (data) => {
      console.log('‚úÖ R√©ponse ping re√ßue:', data);
    });
    
    // Envoyer un ping pour tester la communication bidirectionnelle
    console.log('üèì Envoi d\'un ping au serveur...');
    
    // Simplifier la promesse sans timeout
    const pingResult = await new Promise<boolean>((resolve) => {
      socket.emit('ping', (response) => {
        console.log('‚úÖ R√©ponse ping (callback) re√ßue:', response);
        resolve(true);
      });
    });
    
    // Nettoyer les √©couteurs imm√©diatement
    socket.off('pong');
    console.log('üßπ √âcouteurs nettoy√©s');
    
    return pingResult;
  } catch (error) {
    console.error('‚ùå Erreur lors du test de connexion WebSocket:', error);
    return false;
  }
};

/**
 * Teste la soumission d'une r√©ponse via WebSocket, avec repli vers HTTP en cas d'√©chec
 * @param gameId ID de la partie
 * @param questionId ID de la question
 * @param content Contenu de la r√©ponse
 * @returns {Promise<boolean>} true si la soumission a r√©ussi, false sinon
 */
export const testAndSubmitAnswer = async (gameId: string, questionId: string, content: string): Promise<boolean> => {
  try {
    // Utiliser la m√©thode asynchrone pour obtenir une instance valide
    const socket = await SocketService.getInstanceAsync();
    
    // V√©rifier rapidement si le socket est connect√©
    if (!socket.connected) {
      console.log('‚ö†Ô∏è Socket non connect√©, utilisation HTTP imm√©diate...');
      return await submitAnswerViaHttp(gameId, questionId, content);
    }
    
    // Tenter l'envoi via WebSocket avec un timeout serr√©
    return await Promise.race([
      new Promise<boolean>((resolve) => {
        socket.emit('game:submit_answer', { gameId, questionId, content }, (response) => {
          console.log('‚úÖ R√©ponse soumise via WebSocket:', response);
          resolve(true);
        });
      }),
      new Promise<boolean>(async (resolve) => {
        // Si pas de r√©ponse en 800ms, utiliser HTTP
        await new Promise(r => setTimeout(r, 800));
        console.log('‚ö†Ô∏è Timeout WebSocket, utilisation HTTP...');
        resolve(await submitAnswerViaHttp(gameId, questionId, content));
      })
    ]);
  } catch (error) {
    console.error('‚ùå Erreur lors de la soumission de r√©ponse:', error);
    // En cas d'erreur, tenter par HTTP
    return await submitAnswerViaHttp(gameId, questionId, content);
  }
};

// Fonction d'aide pour soumettre via HTTP
const submitAnswerViaHttp = async (gameId: string, questionId: string, content: string): Promise<boolean> => {
  try {
    // Impl√©mentation HTTP
    const response = await fetch(`/api/games/${gameId}/answer`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ question_id: questionId, content })
    });
    
    return response.ok;
  } catch (error) {
    console.error('‚ùå Erreur HTTP:', error);
    return false;
  }
};

/**
 * V√©rifie si un jeu semble bloqu√© et tente de d√©bloquer
 * @param gameId ID de la partie √† v√©rifier
 * @returns {Promise<boolean>} true si une action de d√©blocage a √©t√© tent√©e
 */
export const checkAndUnblockGame = async (gameId: string): Promise<boolean> => {
  try {
    // R√©cup√©rer l'√©tat complet du jeu
    // Utiliser gameService.getGameState au lieu de GameWebSocketService.getInstance().getGameState
    const gameState = await gameService.getGameState(gameId, true);
    
    if (!gameState) {
      console.error("‚ùå Impossible de r√©cup√©rer l'√©tat du jeu");
      return false;
    }
    
    const { game, answers, currentQuestion, players } = gameState;
    
    // V√©rifier si nous sommes potentiellement bloqu√©s en phase answer
    if (game?.currentPhase === 'answer') {
      // Compter combien de joueurs peuvent r√©pondre (tous sauf la cible)
      const nonTargetPlayers = players.filter(p => 
        p.id !== String(currentQuestion?.targetPlayer?.id)
      ).length;
      
      // Compter les r√©ponses d√©j√† soumises
      const answersSubmitted = answers?.length || 0;
      
      console.log(`üîç Phase answer: ${answersSubmitted}/${nonTargetPlayers} r√©ponses soumises`);
      
      // Si toutes les r√©ponses sont soumises mais nous sommes toujours en phase answer
      if (answersSubmitted >= nonTargetPlayers && nonTargetPlayers > 0) {
        console.log(`‚ö†Ô∏è Blocage potentiel d√©tect√©: Toutes les r√©ponses soumises mais toujours en phase answer`);
        
        // Tenter de forcer une v√©rification de phase sur le serveur
        await gameService.forcePhaseCheck(gameId);
        console.log(`üîÑ Tentative de d√©blocage effectu√©e pour le jeu ${gameId}`);
        return true;
      }
    }
    
    // V√©rifier si nous sommes potentiellement bloqu√©s en phase vote
    if (game?.currentPhase === 'vote') {
      // V√©rifier si le temps √©coul√© est excessif (plus de 2 minutes)
      const currentTime = Date.now();
      const phaseStartTime = game?.phaseStartTime || 0;
      
      if (phaseStartTime && (currentTime - phaseStartTime > 120000)) {
        console.log(`‚ö†Ô∏è Blocage potentiel d√©tect√©: Phase vote active depuis plus de 2 minutes`);
        
        // Tenter de forcer une v√©rification de phase sur le serveur
        await gameService.forcePhaseCheck(gameId);
        console.log(`üîÑ Tentative de d√©blocage effectu√©e pour le jeu ${gameId}`);
        return true;
      }
    }
    
    console.log(`‚úÖ Aucun blocage d√©tect√© pour le jeu ${gameId}`);
    return false;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la v√©rification de blocage:`, error);
    return false;
  }
};

// Nouvelle fonction pour d√©bloquer un jeu apr√®s une r√©ponse
export const checkPhaseAfterAnswer = async (gameId: string): Promise<boolean> => {
  try {
    console.log(`üîç V√©rification de phase apr√®s r√©ponse pour le jeu ${gameId}`);
    
    // Attendre un court d√©lai pour laisser le temps au serveur de traiter
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // R√©cup√©rer l'√©tat du jeu via gameService au lieu de GameWebSocketService
    const gameState = await gameService.getGameState(gameId, true);
    
    if (!gameState) {
      console.error("‚ùå Impossible de r√©cup√©rer l'√©tat du jeu");
      return false;
    }
    
    // Si toujours en phase question alors que l'utilisateur a r√©pondu, forcer le passage
    if (gameState.game?.currentPhase === 'question' && gameState.currentUserState?.hasAnswered) {
      console.log(`‚ö†Ô∏è Blocage d√©tect√©: A r√©pondu mais toujours en phase question`);
      
      // Forcer un passage en phase answer via gameService
      await gameService.forceTransitionToAnswer(gameId);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la v√©rification apr√®s r√©ponse:`, error);
    return false;
  }
};
