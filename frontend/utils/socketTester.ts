import SocketService from '@/services/socketService';
import { SOCKET_URL } from '@/config/axios';

/**
 * Utilitaire pour tester la connexion WebSocket
 */
export const testSocketConnection = async () => {
  console.log('üß™ D√©marrage du test de connexion WebSocket...');
  
  try {
    // Utiliser la m√©thode asynchrone pour obtenir une instance valide
    const socket = await SocketService.getInstanceAsync();
    
    console.log(`üîå URL WebSocket: ${SOCKET_URL}`);
    console.log(`üîå Socket ID: ${socket.id || 'non connect√©'}`);
    console.log(`üîå √âtat de connexion: ${socket.connected ? 'connect√©' : 'd√©connect√©'}`);
    
    // V√©rifier d'abord si le socket est connect√© avant d'ajouter des √©couteurs
    if (!socket.connected) {
      console.log('‚ö†Ô∏è Socket non connect√©, attente de connexion...');
      return false;
    }
    
    // Ajouter un √©couteur temporaire pour les messages de test
    socket.on('pong', (data) => {
      console.log('‚úÖ R√©ponse ping re√ßue:', data);
    });
    
    // Envoyer un ping pour tester la communication bidirectionnelle
    console.log('üèì Envoi d\'un ping au serveur...');
    socket.emit('ping', (response) => {
      console.log('‚úÖ R√©ponse ping (callback) re√ßue:', response);
    });
    
    // Tester la tentative de rejoindre une salle test
    console.log('üö™ Test de jointure √† une salle test...');
    await SocketService.joinRoom('test-room');
    
    // Ajouter un √©couteur temporaire pour confirmer la jointure
    socket.on('room:joined', (data) => {
      console.log('‚úÖ Confirmation de jointure √† la salle:', data);
      
      // Apr√®s confirmation, tester le d√©part
      console.log('üö™ Test de d√©part de la salle test...');
      SocketService.leaveRoom('test-room');
    });
    
    // Ajouter un √©couteur temporaire pour confirmer le d√©part
    socket.on('room:left', (data) => {
      console.log('‚úÖ Confirmation de d√©part de la salle:', data);
    });
    
    // √âcouter les √©v√©nements de jeu pour le d√©bogage
    socket.on('game:update', (data) => {
      console.log('üéÆ √âv√©nement game:update re√ßu:', data);
      
      // Am√©lioration de la validation pour le statut de joueur cibl√©
      if (data.type === 'phase_change' && data.phase === 'vote') {
        console.log('üß™ Test de validation du joueur cibl√©...');
        
        try {
          // V√©rification plus robuste
          const currentQuestion = socket?.gameState?.currentQuestion;
          const currentUser = socket?.userData?.id;
          
          if (currentQuestion && currentUser) {
            // S'assurer que les IDs sont des cha√Ænes pour comparaison
            const targetId = String(currentQuestion.targetPlayer?.id || '');
            const userId = String(currentUser);
            
            const isTarget = targetId === userId;
            console.log(`üéØ Statut de joueur cibl√©: ${isTarget ? 'OUI' : 'NON'} (targetId: ${targetId}, userId: ${userId})`);
            
            if (isTarget) {
              console.log('‚ö†Ô∏è D√©tection de joueur cibl√©: cet utilisateur est la cible et devrait avoir une interface sp√©ciale');
            }
          } else {
            console.log('‚ö†Ô∏è Donn√©es incompl√®tes pour la v√©rification du joueur cibl√©');
          }
        } catch (validationError) {
          console.error('‚ùå Erreur lors de la validation du joueur cibl√©:', validationError);
        }
      }
    });

    // √âcouter les √©v√©nements de phase
    socket.on('phase_change', (data) => {
      console.log('üîÑ √âv√©nement phase_change re√ßu:', data);
    });
    
    // Nettoyer les √©couteurs apr√®s 5 secondes
    setTimeout(() => {
      if (socket.connected) {
        socket.off('pong');
        socket.off('room:joined');
        socket.off('room:left');
        // Ne pas supprimer les √©couteurs de d√©bogage du jeu pour suivre la partie
        console.log('üßπ Nettoyage des √©couteurs de test termin√©');
      }
    }, 5000);
    
    return true;
  } catch (error) {
    console.error('‚ùå Test √©chou√©:', error);
    return false;
  }
};

/**
 * V√©rifier l'√©tat de la connexion WebSocket
 * @returns Un objet contenant l'√©tat actuel de la connexion
 */
export const checkSocketStatus = async () => {
  try {
    // Obtenir le diagnostic complet du service
    const diagnostic = SocketService.diagnose();
    
    // Si d√©connect√©, tenter une initialisation √† la vol√©e
    if (diagnostic.status !== 'connected') {
      console.log('üîå Socket non connect√©, tentative d\'initialisation...');
      try {
        const socket = await SocketService.getInstanceAsync();
        const isConnected = socket.connected; // Utiliser la propri√©t√© connected directement
        return {
          isConnected,
          socketId: socket.id || null,
          transport: socket.io?.engine?.transport?.name || null,
          url: SOCKET_URL,
          reconnection: true
        };
      } catch (initError) {
        console.error('‚ùå √âchec de l\'initialisation du socket:', initError);
      }
    }
    
    return {
      isConnected: diagnostic.details.connected,
      socketId: diagnostic.details.socketId,
      transport: diagnostic.details.transport,
      url: SOCKET_URL,
      ...diagnostic.details
    };
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification du statut socket:', error);
    return {
      isConnected: false,
      error: error.message,
      url: SOCKET_URL,
    };
  }
};

/**
 * V√©rifier l'√©tat de la connexion WebSocket
 * @returns Un objet contenant l'√©tat actuel de la connexion
 */
export const checkSocketConnection = async (): Promise<{ 
  connected: boolean; 
  socketId: string | null;
  activeRooms: string[];
  activeGames: string[];
}> => {
  try {
    // Utiliser la m√©thode asynchrone pour obtenir une instance valide
    const socket = await SocketService.getInstanceAsync();
    const diagnostic = SocketService.diagnose();
    
    console.log(`üîç Diagnostic WebSocket effectu√© - connect√©: ${socket.connected}`);
    
    return {
      connected: socket.connected,
      socketId: socket.id,
      activeRooms: diagnostic.activeChannels.rooms,
      activeGames: diagnostic.activeChannels.games,
    };
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de la connexion WebSocket:', error);
    return {
      connected: false,
      socketId: null,
      activeRooms: [],
      activeGames: [],
    };
  }
};

/**
 * Diagnostic avanc√© des √©v√©nements de jeu
 * Utile pour le d√©bogage des parties en cours
 * @param gameId ID de la partie √† surveiller
 */
export const monitorGameEvents = async (gameId) => {
  try {
    const socket = await SocketService.getInstanceAsync();
    console.log(`üîç D√©marrage du monitoring pour le jeu ${gameId}...`);
    
    // Rejoindre le canal de la partie
    await SocketService.joinRoom(`game:${gameId}`);
    
    // √âcouter les √©v√©nements de mise √† jour de la partie
    socket.on('game:update', (data) => {
      console.log(`üìä [Jeu ${gameId}] Mise √† jour:`, data);
    });
    
    // √âcouter les √©v√©nements d'erreur
    socket.on('error', (error) => {
      console.error(`‚ùå [Jeu ${gameId}] Erreur:`, error);
    });
    
    console.log(`‚úÖ Monitoring actif pour le jeu ${gameId}`);
    return true;
  } catch (error) {
    console.error('‚ùå √âchec du monitoring:', error);
    return false;
  }
};

/**
 * Outils de diagnostic pour les situations de joueur cibl√©
 * @param gameId ID de la partie
 */
export const testTargetPlayerScenario = async (gameId: string) => {
  try {
    const socket = await SocketService.getInstanceAsync();
    console.log(`üîç D√©marrage du test de sc√©nario 'joueur cibl√©' pour le jeu ${gameId}...`);
    
    // √âcouter sp√©cifiquement les mises √† jour qui contiennent des informations sur le joueur cibl√©
    socket.on('game:update', (data) => {
      if (data.question && data.question.targetPlayer) {
        console.log(`üéØ Joueur cibl√© d√©tect√©: ${data.question.targetPlayer.displayName || data.question.targetPlayer.username} (ID: ${data.question.targetPlayer.id})`);
        
        // V√©rifier si le joueur actuel est la cible
        if (socket.userData && socket.userData.id === data.question.targetPlayer.id) {
          console.log('‚ö†Ô∏è VOUS √™tes le joueur cibl√© pour cette question!');
          console.log('‚úÖ Comportement attendu: Vous ne devriez PAS pouvoir r√©pondre √† cette question.');
        }
      }
    });
    
    console.log(`‚úÖ Test de sc√©nario 'joueur cibl√©' activ√© pour le jeu ${gameId}`);
    return true;
  } catch (error) {
    console.error('‚ùå √âchec du test de sc√©nario:', error);
    return false;
  }
};

/**
 * Outils de diagnostic pour les situations de joueur cibl√©
 * @param gameId ID de la partie
 */
export const diagTargetPlayerStatus = async (gameId: string) => {
  try {
    const socket = await SocketService.getInstanceAsync();
    console.log(`üîç Diagnostic joueur cibl√© pour le jeu ${gameId}...`);
    
    const userId = await UserIdManager.getUserId();
    
    console.log(`üë§ ID utilisateur connect√©: ${userId || 'non disponible'}`);
    
    if (socket.gameState?.currentQuestion?.targetPlayer) {
      const targetId = String(socket.gameState.currentQuestion.targetPlayer.id);
      console.log(`üéØ Joueur cibl√© dans la question: ${targetId}`);
      
      const isTarget = userId && targetId === String(userId);
      console.log(`üëâ Ce client ${isTarget ? 'EST' : 'N\'EST PAS'} le joueur cibl√©`);
    } else {
      console.log('‚ùå Aucune information de joueur cibl√© disponible');
    }
    
    return socket.gameState?.currentUserState?.isTargetPlayer || false;
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic de joueur cibl√©:', error);
    return false;
  }
};

/**
 * Soumettre un vote via WebSocket directement
 * @param gameId ID de la partie
 * @param answerId ID de la r√©ponse choisie
 * @param questionId ID de la question
 * @returns Une promesse r√©solue si le vote a √©t√© soumis avec succ√®s
 */
export const submitVoteViaSocket = async (gameId: string, answerId: string, questionId: string): Promise<boolean> => {
  try {
    console.log(`üó≥Ô∏è Tentative de vote WebSocket - jeu: ${gameId}, r√©ponse: ${answerId}`);
    
    const socket = await SocketService.getInstanceAsync();
    
    // Cr√©er une promesse pour attendre la confirmation du serveur
    return new Promise((resolve, reject) => {
      // D√©finir un timeout pour la confirmation WebSocket
      const timeoutId = setTimeout(() => {
        console.error('‚è±Ô∏è Timeout WebSocket atteint, le vote a √©chou√©');
        reject(new Error('Le serveur a mis trop de temps √† r√©pondre. Veuillez r√©essayer.'));
      }, 5000);
      
      // √âcouter l'√©v√©nement de confirmation
      const handleConfirmation = (data) => {
        if (data.questionId === questionId) {
          console.log('‚úÖ Confirmation WebSocket re√ßue pour le vote');
          clearTimeout(timeoutId);
          socket.off('vote:confirmation', handleConfirmation);
          resolve(true);
        }
      };
      
      // S'abonner √† l'√©v√©nement de confirmation
      socket.on('vote:confirmation', handleConfirmation);
      
      // Envoyer le vote via WebSocket
      socket.emit('game:submit_vote', {
        gameId,
        answerId,
        questionId
      }, (ackData) => {
        if (ackData && ackData.success) {
          console.log('‚úÖ Accus√© de r√©ception WebSocket re√ßu pour le vote');
          clearTimeout(timeoutId);
          socket.off('vote:confirmation', handleConfirmation);
          resolve(true);
        } else if (ackData && ackData.error) {
          console.error(`‚ùå Erreur lors de la soumission du vote WebSocket: ${ackData.error}`);
          clearTimeout(timeoutId);
          socket.off('vote:confirmation', handleConfirmation);
          reject(new Error(ackData.error));
        }
      });
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la soumission du vote via WebSocket:', error);
    throw error;
  }
};

/**
 * Outils de diagnostic pour les situations de joueur cibl√©
 * @param gameId ID de la partie
 */
export const diagnoseTargetPlayer = async (gameId: string) => {
  try {
    const socket = await SocketService.getInstanceAsync();
    console.log(`üîç Diagnostic de joueur cibl√© pour jeu ${gameId}...`);

    if (!socket.connected) {
      console.error('‚ùå Socket non connect√©, diagnostic impossible');
      return { success: false, error: 'Socket non connect√©' };
    }

    // R√©cup√©rer l'√©tat actuel du jeu
    const gameState = socket.gameState;
    const userData = socket.userData;

    if (!gameState || !userData) {
      console.error('‚ùå Donn√©es insuffisantes pour le diagnostic');
      return { 
        success: false, 
        error: 'Donn√©es insuffisantes',
        gameStateAvailable: !!gameState,
        userDataAvailable: !!userData 
      };
    }

    const currentQuestion = gameState?.currentQuestion;
    const userId = userData.id;
    
    console.log('üìä √âtat du jeu:', {
      currentPhase: gameState.currentPhase,
      hasCurrentQuestion: !!currentQuestion,
      questionId: currentQuestion?.id,
      hasTargetPlayer: !!currentQuestion?.targetPlayer,
      targetPlayerId: currentQuestion?.targetPlayer?.id,
      currentUserId: userId
    });

    // V√©rifier si l'utilisateur est la cible
    const isTarget = currentQuestion?.targetPlayer?.id === userId;
    
    return {
      success: true,
      isTarget,
      currentPhase: gameState.currentPhase,
      userId,
      targetId: currentQuestion?.targetPlayer?.id,
      questionId: currentQuestion?.id
    };
  } catch (error) {
    console.error('‚ùå Erreur durant le diagnostic du joueur cibl√©:', error);
    return { success: false, error: error.message };
  }
};

/**
 * Tester la soumission d'une r√©ponse via WebSocket
 * @param gameId ID de la partie
 * @param questionId ID de la question
 * @param content Contenu de la r√©ponse
 */
export const testSubmitAnswerViaSocket = async (gameId: string, questionId: string, content: string) => {
  try {
    const socket = await SocketService.getInstanceAsync();
    console.log(`üß™ Test de soumission de r√©ponse via WebSocket - jeu: ${gameId}, question: ${questionId}`);
    
    return new Promise((resolve, reject) => {
      // Configurer un timeout
      const timeoutId = setTimeout(() => {
        socket.off('answer:confirmation');
        reject(new Error('Timeout: Pas de r√©ponse du serveur apr√®s 5 secondes'));
      }, 5000);
      
      // √âcouter l'√©v√©nement de confirmation
      socket.once('answer:confirmation', (data) => {
        clearTimeout(timeoutId);
        console.log('‚úÖ Confirmation de r√©ponse re√ßue:', data);
        resolve({ success: true, data });
      });
      
      // Envoyer la r√©ponse
      socket.emit('game:submit_answer', {
        gameId,
        questionId,
        content
      }, (ackData) => {
        // Ceci est le callback d'acquittement imm√©diat
        console.log('üì® Acquittement imm√©diat re√ßu:', ackData);
        if (ackData && !ackData.success) {
          clearTimeout(timeoutId);
          socket.off('answer:confirmation');
          reject(new Error(`Erreur lors de la soumission: ${ackData.error || 'Inconnue'}`));
        }
      });
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du test de soumission:', error);
    throw error;
  }
};

/**
 * Tester la soumission d'un vote via WebSocket
 */
export const testSubmitVoteViaSocket = async (gameId: string, answerId: string, questionId: string) => {
  try {
    const socket = await SocketService.getInstanceAsync();
    console.log(`üß™ Test de soumission de vote via WebSocket - jeu: ${gameId}, r√©ponse: ${answerId}`);
    
    return new Promise((resolve, reject) => {
      // Configurer un timeout
      const timeoutId = setTimeout(() => {
        socket.off('vote:confirmation');
        reject(new Error('Timeout: Pas de r√©ponse du serveur apr√®s 5 secondes'));
      }, 5000);
      
      // √âcouter l'√©v√©nement de confirmation
      socket.once('vote:confirmation', (data) => {
        clearTimeout(timeoutId);
        console.log('‚úÖ Confirmation de vote re√ßue:', data);
        resolve({ success: true, data });
      });
      
      // Envoyer le vote
      socket.emit('game:submit_vote', {
        gameId,
        answerId,
        questionId
      }, (ackData) => {
        // Ceci est le callback d'acquittement imm√©diat
        console.log('üì® Acquittement imm√©diat re√ßu:', ackData);
        if (ackData && !ackData.success) {
          clearTimeout(timeoutId);
          socket.off('vote:confirmation');
          reject(new Error(`Erreur lors du vote: ${ackData.error || 'Inconnue'}`));
        }
      });
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du test de vote:', error);
    throw error;
  }
};

export default {
  testSocketConnection,
  checkSocketStatus,
  checkSocketConnection,
  monitorGameEvents,
  testTargetPlayerScenario,
  diagTargetPlayerStatus,
  submitVoteViaSocket,
  diagnoseTargetPlayer,
  testSubmitAnswerViaSocket,
  testSubmitVoteViaSocket,
};
