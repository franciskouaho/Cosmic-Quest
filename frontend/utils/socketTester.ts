import socketService from '@/services/socketService';
import GameStateHelper from './gameStateHelper';
import gameService from '@/services/queries/game';

/**
 * Teste la connexion socket avec plusieurs tentatives
 */
export const testSocketConnection = async (maxAttempts: number = 3): Promise<boolean> => {
  try {
    console.log(`üîå Test de connexion socket avec ${maxAttempts} tentatives max`);
    let attempts = 0;
    
    while (attempts < maxAttempts) {
      attempts++;
      console.log(`üîÑ Tentative ${attempts}/${maxAttempts} de connexion socket`);
      
      try {
        socketService.setAutoInit(true); // Activer l'initialisation automatique
        const socket = await socketService.getInstanceAsync(true);
        
        if (socket && socket.connected) {
          console.log('‚úÖ Test de connexion socket r√©ussi');
          return true;
        }
        
        console.log('‚è≥ Socket cr√©√© mais pas connect√©, tentative de reconnexion...');
        const reconnected = await socketService.reconnect();
        
        if (reconnected) {
          console.log('‚úÖ Reconnexion socket r√©ussie');
          return true;
        }
        
        // Attendre un peu avant la prochaine tentative
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        console.error(`‚ùå Erreur lors de la tentative ${attempts}:`, error);
        // Attendre un peu avant la prochaine tentative
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    console.error(`‚ùå √âchec de connexion socket apr√®s ${maxAttempts} tentatives`);
    return false;
  } catch (error) {
    console.error('‚ùå Erreur de connexion socket:', error);
    return false;
  }
};

/**
 * Teste la soumission d'une r√©ponse avec r√©cup√©ration am√©lior√©e
 */
export const testSubmitAnswer = async (
  gameId: string,
  questionId: string,
  content: string
): Promise<boolean> => {
  try {
    console.log(`üéÆ Test de soumission de r√©ponse pour le jeu ${gameId}`);
    
    // V√©rifier d'abord la connexion socket
    const isConnected = await testSocketConnection(2);
    if (!isConnected) {
      console.warn('‚ö†Ô∏è Socket non connect√©, tentative de soumission via HTTP');
      // Tenter via HTTP comme fallback (utiliser gameService)
      return await gameService.submitAnswer(gameId, questionId, content);
    }
    
    // Si connect√©, utiliser le socket
    const socket = await socketService.getInstanceAsync(true);
    
    return new Promise((resolve) => {
      // D√©finir un timeout de 5 secondes
      const timeout = setTimeout(() => {
        console.warn('‚ö†Ô∏è Timeout lors de la soumission de r√©ponse, consid√©r√© comme √©chec');
        resolve(false);
      }, 5000);
      
      socket.emit('game:submit_answer', { gameId, questionId, content }, (response: any) => {
        clearTimeout(timeout);
        console.log('‚úÖ R√©sultat du test de soumission:', response);
        resolve(!!response?.success);
      });
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du test de soumission:', error);
    return false;
  }
};

/**
 * V√©rifie si un joueur a r√©pondu mais est toujours en phase question
 * et tente de r√©soudre ce probl√®me
 */
export const checkPhaseAfterAnswer = async (gameId: string): Promise<boolean> => {
  try {
    console.log(`üîç V√©rification de phase apr√®s r√©ponse pour le jeu ${gameId}`);
    
    // Tenter d'obtenir l'√©tat du jeu, m√™me en cas d'erreur de connexion
    let gameData;
    try {
      gameData = await gameService.getGameState(gameId);
    } catch (e) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'√©tat du jeu:', e);
      return false;
    }
    
    // V√©rifier l'incoh√©rence: le joueur a r√©pondu mais est toujours en phase question
    if (gameData.currentUserState?.hasAnswered && gameData.game.currentPhase === 'question') {
      console.log(`‚ö†Ô∏è Blocage d√©tect√©: A r√©pondu mais toujours en phase question`);
      
      // Essayer d'abord via WebSocket
      try {
        // Tenter de rejoindre le canal du jeu d'abord
        await socketService.joinGameChannel(gameId);
        
        // Forcer la v√©rification de phase
        await socketService.forcePhaseCheck(gameId);
        console.log(`‚úÖ V√©rification de phase forc√©e via WebSocket`);
        
        // Attendre un moment pour que les changements prennent effet
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // V√©rifier √† nouveau l'√©tat
        const updatedGameData = await gameService.getGameState(gameId);
        if (updatedGameData.game.currentPhase !== 'question') {
          console.log(`‚úÖ Phase mise √† jour avec succ√®s: ${updatedGameData.game.currentPhase}`);
          return true;
        }
      } catch (wsError) {
        console.warn(`‚ö†Ô∏è √âchec de la correction via WebSocket:`, wsError);
      }
      
      // Si WebSocket √©choue, essayer via HTTP
      try {
        const success = await gameService.forcePhaseTransition(gameId, 'answer');
        
        if (success) {
          console.log(`‚úÖ Phase mise √† jour via HTTP`);
          return true;
        }
      } catch (httpError) {
        console.warn(`‚ö†Ô∏è √âchec de la correction via HTTP:`, httpError);
      }
      
      // Derni√®re approche
      try {
        return await GameStateHelper.forcePhaseTransition(gameId, 'answer');
      } catch (helperError) {
        console.error(`‚ùå Toutes les tentatives de correction ont √©chou√©:`, helperError);
        return false;
      }
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de phase:', error);
    return false;
  }
};

/**
 * V√©rifie et d√©bloque un jeu potentiellement bloqu√©
 * avec des m√©canismes de r√©cup√©ration am√©lior√©s
 */
export const checkAndUnblockGame = async (gameId: string): Promise<boolean> => {
  try {
    console.log(`üîç V√©rification et tentative de d√©blocage du jeu ${gameId}`);
    
    // Assurer que le socket est connect√©
    const socketConnected = await testSocketConnection(1);
    
    if (socketConnected) {
      try {
        // Tenter de rejoindre le canal du jeu
        await socketService.joinGameChannel(gameId);
        console.log(`‚úÖ Canal de jeu ${gameId} rejoint`);
        
        // Forcer une v√©rification de phase
        await socketService.forcePhaseCheck(gameId);
        console.log(`‚úÖ V√©rification de phase forc√©e`);
        
        // Attendre un moment pour que les changements prennent effet
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (wsError) {
        console.warn(`‚ö†Ô∏è Op√©rations WebSocket √©chou√©es:`, wsError);
      }
    }
    
    // Utiliser GameStateHelper quoi qu'il arrive
    return await GameStateHelper.checkAndUnblockGame(gameId);
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de blocage:', error);
    return false;
  }
};

/**
 * M√©thode de r√©cup√©ration d'urgence pour les jeux bloqu√©s
 * Tente plusieurs approches pour d√©bloquer un jeu
 */
export const emergencyGameRecovery = async (gameId: string): Promise<boolean> => {
  console.log(`üö® R√âCUP√âRATION D'URGENCE pour le jeu ${gameId}`);
  
  try {
    // 1. Forcer une initialisation socket compl√®te
    socketService.setAutoInit(true);
    await socketService.cleanup(); // Nettoyer compl√®tement avant de recommencer
    
    try {
      const socket = await socketService.ensureConnection(3);
      if (socket && socket.connected) {
        console.log(`‚úÖ Connection socket r√©tablie`);
      }
    } catch (socketError) {
      console.warn(`‚ö†Ô∏è Impossible de r√©tablir la connexion socket:`, socketError);
    }
    
    // 2. Tenter de rejoindre le canal avec plusieurs essais
    let joinSuccess = false;
    try {
      joinSuccess = await socketService.reconnectToRoom(`game:${gameId}`, 3);
      if (joinSuccess) {
        console.log(`‚úÖ Rejoint le canal de jeu avec succ√®s`);
      }
    } catch (joinError) {
      console.warn(`‚ö†Ô∏è √âchec de rejoindre le canal:`, joinError);
    }
    
    // 3. Essayer la r√©cup√©ration via GameStateHelper
    const helperSuccess = await GameStateHelper.forceGameRecovery(gameId);
    
    return helperSuccess || joinSuccess;
  } catch (error) {
    console.error(`‚ùå √âchec de la r√©cup√©ration d'urgence:`, error);
    return false;
  }
};

export default {
  testSocketConnection,
  testSubmitAnswer,
  checkPhaseAfterAnswer,
  checkAndUnblockGame,
  emergencyGameRecovery
};
