import api from '@/config/axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import SocketService from './socketService';
import NetInfo from '@react-native-community/netinfo';

export interface CreateRoomPayload {
  name: string;
  game_mode: string;
  is_private?: boolean;
  max_players?: number;
  total_rounds?: number;
}

class RoomService {
  static async createRoom(payload: CreateRoomPayload) {
    try {
      console.log('üèóÔ∏è Cr√©ation de salle avec payload:', payload);

      // V√©rification de la connexion internet
      const netInfo = await NetInfo.fetch();
      if (!netInfo.isConnected) {
        console.error('‚ùå Pas de connexion internet disponible');
        throw new Error('Pas de connexion internet. Veuillez v√©rifier votre connexion et r√©essayer.');
      }

      // R√©cup√©ration du token d'authentification
      const token = await AsyncStorage.getItem('@auth_token');
      if (!token) {
        console.error('‚ùå Aucun token d\'authentification trouv√©');
        throw new Error('Vous n\'√™tes pas authentifi√©. Veuillez vous reconnecter.');
      }

      const headers = {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      };

      console.log('üåê Envoi de la requ√™te de cr√©ation de salle');
      const response = await api.post('/rooms', payload, { headers });
      console.log('‚úÖ Salle cr√©√©e avec succ√®s:', response.data?.status);
      
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la cr√©ation de la salle:', error);
      
      if (error.message.includes('Network Error')) {
        console.error('‚ùå Erreur r√©seau d√©tect√©e. D√©tails suppl√©mentaires:');
        console.error('- URL API configur√©e:', api.defaults.baseURL);
        console.error('- Timeout configur√©:', api.defaults.timeout, 'ms');
        
        // V√©rifier l'√©tat de la connexion
        const netInfo = await NetInfo.fetch();
        console.error(`- √âtat connexion: ${netInfo.isConnected ? 'Connect√©' : 'Non connect√©'} (${netInfo.type})`);
      }
      
      throw error;
    }
  }

  static async joinRoom(roomCode: string) {
    try {
      console.log(`üö™ Tentative de rejoindre la salle ${roomCode}`);
      
      // V√©rification de la connexion internet
      const netInfo = await NetInfo.fetch();
      if (!netInfo.isConnected) {
        console.error('‚ùå Pas de connexion internet disponible');
        throw new Error('Pas de connexion internet. Veuillez v√©rifier votre connexion et r√©essayer.');
      }

      // V√©rification et initialisation de la connexion WebSocket
      if (!SocketService.isConnected()) {
        console.log('‚ö†Ô∏è WebSocket non connect√©. Tentative de reconnexion...');
        try {
          const socket = SocketService.reconnect();
          // Attendre un peu pour que la connexion s'√©tablisse
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          if (!socket.connected) {
            console.log('‚ö†Ô∏è WebSocket toujours non connect√© apr√®s tentative. Continuons avec la requ√™te HTTP...');
          } else {
            console.log('‚úÖ WebSocket reconnect√© avec succ√®s');
          }
        } catch (wsError) {
          console.error('‚ùå √âchec de la reconnexion WebSocket:', wsError);
          // Continuons avec la requ√™te HTTP m√™me si WebSocket √©choue
        }
      }

      // R√©cup√©ration du token d'authentification
      const token = await AsyncStorage.getItem('@auth_token');
      if (!token) {
        console.error('‚ùå Aucun token d\'authentification trouv√©');
        throw new Error('Vous n\'√™tes pas authentifi√©. Veuillez vous reconnecter.');
      }

      const headers = {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      };

      console.log(`üåê Envoi de la requ√™te pour rejoindre la salle ${roomCode}`);
      const response = await api.post(`/rooms/${roomCode}/join`, {}, { headers });
      console.log('‚úÖ Salle rejointe avec succ√®s:', response.data?.status);
      
      // Rejoindre le canal WebSocket de la salle, m√™me si la connexion √©choue,
      // cela permettra de rejoindre automatiquement lors de la reconnexion
      SocketService.joinRoom(roomCode);
      
      return response.data;
    } catch (error: any) {
      console.error(`‚ùå Erreur lors de la tentative de rejoindre la salle ${roomCode}:`, error);
      throw error;
    }
  }
}

export default RoomService;
