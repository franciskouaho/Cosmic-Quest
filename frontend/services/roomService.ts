import axios from '@/config/axios'; // Remplace l'importation de api
import AsyncStorage from '@react-native-async-storage/async-storage';
import SocketService from './socketService';
import NetInfo from '@react-native-community/netinfo';

export interface CreateRoomPayload {
  name: string;
  game_mode: string;
  is_private?: boolean;
  max_players?: number;
  total_rounds?: number;
}

class RoomService {
  static async createRoom(payload: CreateRoomPayload) {
    try {
      console.log('üèóÔ∏è Cr√©ation de salle avec payload:', payload);

      // V√©rification de la connexion internet
      const netInfo = await NetInfo.fetch();
      if (!netInfo.isConnected) {
        console.error('‚ùå Pas de connexion internet disponible');
        throw new Error('Pas de connexion internet. Veuillez v√©rifier votre connexion et r√©essayer.');
      }

      // Plus besoin de g√©rer l'authentification ici, c'est fait dans l'intercepteur
      console.log('üåê Envoi de la requ√™te de cr√©ation de salle');
      const response = await axios.post('/rooms', payload);
      console.log('‚úÖ Salle cr√©√©e avec succ√®s:', response.data?.status);
      
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la cr√©ation de la salle:', error);
      
      if (error.message.includes('Network Error')) {
        console.error('‚ùå Erreur r√©seau d√©tect√©e. D√©tails suppl√©mentaires:');
        console.error('- URL API configur√©e:', axios.defaults.baseURL);
        console.error('- Timeout configur√©:', axios.defaults.timeout, 'ms');
        
        // V√©rifier l'√©tat de la connexion
        const netInfo = await NetInfo.fetch();
        console.error(`- √âtat connexion: ${netInfo.isConnected ? 'Connect√©' : 'Non connect√©'} (${netInfo.type})`);
      }
      
      throw error;
    }
  }

  static async joinRoom(roomCode: string) {
    try {
      console.log(`üö™ Tentative de rejoindre la salle ${roomCode}`);
      
      // V√©rification de la connexion internet
      const netInfo = await NetInfo.fetch();
      if (!netInfo.isConnected) {
        console.error('‚ùå Pas de connexion internet disponible');
        throw new Error('Pas de connexion internet. Veuillez v√©rifier votre connexion et r√©essayer.');
      }

      console.log(`üåê Envoi de la requ√™te pour rejoindre la salle ${roomCode}`);
      
      // Premi√®re √©tape : v√©rifier l'√©tat de la connexion WebSocket mais sans d√©pendre du r√©sultat
      const isSocketConnected = SocketService.isConnected();
      console.log(`üîå √âtat de la connexion WebSocket: ${isSocketConnected ? 'Connect√©' : 'Non connect√©'}`);
      
      // Deuxi√®me √©tape : effectuer la requ√™te HTTP (sans besoin de g√©rer manuellement l'authentification)
      const response = await axios.post(`/rooms/${roomCode}/join`, {});
      console.log('‚úÖ Salle rejointe avec succ√®s:', response.data?.status);
      
      // Troisi√®me √©tape : essayer d'envoyer un message WebSocket dans un bloc try-catch s√©par√©
      try {
        // Appel direct sans stocker de r√©f√©rence interm√©diaire
        import('./socketService').then(module => {
          const socketServiceModule = module.default;
          socketServiceModule.joinRoom(roomCode);
          console.log(`‚úÖ Demande WebSocket pour rejoindre la salle ${roomCode} envoy√©e`);
        }).catch(err => {
          console.error('‚ùå Erreur lors du chargement du module socketService:', err);
        });
      } catch (socketError) {
        // Ne pas faire √©chouer l'op√©ration √† cause d'une erreur WebSocket
        console.error('‚ùå Erreur WebSocket ignor√©e:', socketError);
      }
      
      return response.data;
    } catch (error: any) {
      console.error(`‚ùå Erreur lors de la tentative de rejoindre la salle ${roomCode}:`, error);
      throw error;
    }
  }
}

export default RoomService;
