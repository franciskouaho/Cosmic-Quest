import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from '@/config/axios';

export interface User {
  id: number;
  username: string;
  displayName: string;
  avatar: string | null;
  level: number;
  experiencePoints: number;
  token?: string;
}

// Mettre √† jour l'interface pour correspondre √† la structure r√©elle de la r√©ponse
interface AuthResponse {
  status: string;
  message: string;
  data: {
    id: number;
    username: string;
    displayName: string;
    avatar: string | null;
    level?: number;
    experiencePoints?: number;
    token: string;
    created_at?: string;
  };
}

// Fonction pour r√©cup√©rer le token
export async function getToken(): Promise<string | null> {
  console.log('üîê R√©cup√©ration du token d\'authentification');
  try {
    const token = await AsyncStorage.getItem('@auth_token');
    console.log('üîê Token trouv√©:', token ? 'oui' : 'non');
    return token;
  } catch (error) {
    console.error('üîê Erreur lors de la r√©cup√©ration du token:', error);
    return null;
  }
}

// Fonction pour v√©rifier et valider le token
export async function checkTokenValidity(): Promise<boolean> {
  try {
    const token = await getToken();
    if (!token) return false;
    
    // Simple v√©rification pour voir si le token existe et n'est pas expir√©
    // Une vraie validation pourrait impliquer un appel API pour v√©rifier c√¥t√© serveur
    console.log('üîç V√©rification de la validit√© du token');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification du token:', error);
    return false;
  }
}

class AuthService {
  // Enregistrement ou connexion (selon si l'utilisateur existe d√©j√†)
  async registerOrLogin(username: string): Promise<User> {
    console.log(`üîê Tentative d'authentification pour l'utilisateur: ${username}`);
    try {
      console.log('üåê Envoi requ√™te POST:', `/auth/register-or-login`);
      const response = await axios.post(`/auth/register-or-login`, { username });
      console.log('‚úÖ Authentification r√©ussie:', response.data?.status === 'success' ? 'succ√®s' : '√©chec');
      
      // Extraire les donn√©es utilisateur
      let userData;
      
      if (response.data?.status === 'success') {
        if (response.data?.data?.user) {
          // Format de r√©ponse avec un niveau nested 'user'
          userData = {
            id: response.data.data.user.id,
            username: response.data.data.user.username,
            displayName: response.data.data.user.displayName,
            avatar: response.data.data.user.avatar,
            level: response.data.data.user.level || 1,
            experiencePoints: response.data.data.user.experiencePoints || 0,
            token: response.data.data.token
          };
        } else if (response.data?.data) {
          // Format de r√©ponse plat
          userData = {
            id: response.data.data.id,
            username: response.data.data.username,
            displayName: response.data.data.displayName,
            avatar: response.data.data.avatar,
            level: response.data.data.level || 1,
            experiencePoints: response.data.data.experiencePoints || 0,
            token: response.data.data.token
          };
        }
        
        // Stocker le token et les donn√©es utilisateur
        if (userData?.token) {
          await AsyncStorage.setItem('@auth_token', userData.token);
          await AsyncStorage.setItem('@user_data', JSON.stringify(userData));
          console.log('‚úÖ Token et donn√©es utilisateur stock√©s localement');
        }
        
        return userData;
      }
      
      throw new Error('Format de r√©ponse invalide');
    } catch (error) {
      console.error('‚ùå Erreur d\'authentification:', error);
      console.error('D√©tails:', error.response?.data || error.message);
      throw error;
    }
  }

  // D√©connexion (c√¥t√© client seulement)
  async logout(): Promise<void> {
    console.log('üîê D√©connexion en cours');
    try {
      // Pas d'appel API pour la d√©connexion - juste supprimer le token c√¥t√© client
      await AsyncStorage.removeItem('@auth_token');
      await AsyncStorage.removeItem('@user_data');
      console.log('‚úÖ D√©connexion r√©ussie, tokens supprim√©s');
    } catch (error) {
      console.error('‚ùå Erreur lors de la d√©connexion:', error);
      throw error;
    }
  }

  // V√©rifier si l'utilisateur est connect√©
  async isAuthenticated(): Promise<boolean> {
    console.log('üîê V√©rification de l\'authentification');
    try {
      const token = await AsyncStorage.getItem('@auth_token');
      const isAuth = !!token;
      console.log('üîê Utilisateur authentifi√©:', isAuth ? 'oui' : 'non');
      return isAuth;
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification de l\'authentification:', error);
      return false;
    }
  }

  // R√©cup√©rer les informations utilisateur stock√©es
  async getCurrentUser(): Promise<User | null> {
    console.log('üîê R√©cup√©ration des informations utilisateur');
    try {
      // Essayer d'obtenir les donn√©es depuis l'API en premier
      try {
        // Changer /users/profile √† la place de /me qui n'existe pas
        const response = await axios.get(`/users/profile`);
        if (response.data?.status === 'success' && response.data?.data) {
          const userData = {
            id: response.data.data.id,
            username: response.data.data.username,
            displayName: response.data.data.display_name,
            avatar: response.data.data.avatar,
            level: response.data.data.level,
            experiencePoints: response.data.data.experience_points,
          };
          
          // Mettre √† jour le stockage local avec les donn√©es fra√Æches
          await AsyncStorage.setItem('@user_data', JSON.stringify(userData));
          
          // D√©finir l'ID utilisateur dans UserIdManager
          await UserIdManager.setUserId(userData.id);
          
          console.log('‚úÖ Donn√©es utilisateur r√©cup√©r√©es depuis l\'API et mises en cache');
          return userData;
        }
      } catch (apiError) {
        console.log('‚ö†Ô∏è Impossible d\'obtenir les donn√©es utilisateur depuis l\'API, tentative de r√©cup√©ration locale');
        console.error('D√©tails de l\'erreur API:', apiError.response?.data || apiError.message);
      }
      
      // Fallback au stockage local si l'API √©choue
      const userData = await AsyncStorage.getItem('@user_data');
      if (!userData) {
        console.log('üîê Aucune donn√©e utilisateur trouv√©e');
        return null;
      }
      
      const user = JSON.parse(userData);
      console.log('‚úÖ Donn√©es utilisateur r√©cup√©r√©es du cache local:', user.username);
      
      // S'assurer que l'ID est d√©fini dans UserIdManager
      await UserIdManager.setUserId(user.id);
      
      return user;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es utilisateur:', error);
      return null;
    }
  }
}

// Hook personnalis√© pour la connexion
export const useLogin = () => {
  return useMutation({
    mutationFn: async (credentials: LoginCredentials | string) => {
      // Si credentials est une simple cha√Æne, la consid√©rer comme username
      const payload = typeof credentials === 'string' 
        ? { username: credentials } 
        : credentials;
      
      // Utiliser register-or-login au lieu de login car c'est l'endpoint disponible
      const response = await axios.post('/auth/register-or-login', payload);
      return response.data.data;
    },
    onSuccess: async (data) => {
      await AsyncStorage.setItem('@auth_token', data.token);
      
      if (data.user && data.user.id) {
        await UserIdManager.setUserId(data.user.id);
        await AsyncStorage.setItem('@user_data', JSON.stringify(data.user));
      } else if (data.id) {
        // Format alternatif de la r√©ponse
        await UserIdManager.setUserId(data.id);
        await AsyncStorage.setItem('@user_data', JSON.stringify(data));
      }
      
      queryClient.invalidateQueries({ queryKey: ['user'] });
    }
  });
};

export default new AuthService();
