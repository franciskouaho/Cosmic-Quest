import api from '@/config/axios';
import { Answer } from '@/types/gameTypes';
import NetInfo from '@react-native-community/netinfo';
import SocketService from '../socketService';

class GameService {
  // R√©cup√©rer l'√©tat actuel du jeu avec m√©canisme de r√©essai
  async getGameState(gameId: string, retryCount = 0, maxRetries = 3) {
    console.log(`üéÆ GameService: R√©cup√©ration de l'√©tat du jeu ${gameId}`);
    try {
      // V√©rification de la connexion internet
      const netInfo = await NetInfo.fetch();
      if (!netInfo.isConnected) {
        console.warn('‚ö†Ô∏è Pas de connexion internet disponible');
        throw new Error('Pas de connexion internet. Veuillez v√©rifier votre connexion et r√©essayer.');
      }

      const url = `/games/${gameId}`;
      console.log('üîê API Request: GET', url);
      
      const response = await api.get(url);
      console.log('‚úÖ GameService: √âtat du jeu', gameId, 'r√©cup√©r√© avec succ√®s');
      
      // V√©rifier si la r√©ponse est correcte et a les propri√©t√©s attendues
      if (!response.data?.data?.game) {
        console.warn('‚ö†Ô∏è Structure de r√©ponse inattendue:', response.data);
        throw new Error('Donn√©es de jeu incompl√®tes');
      }
      
      // Assurer que le joueur cible est correctement identifi√©
      const gameData = response.data.data;
      if (gameData.currentQuestion?.targetPlayer) {
        const targetId = gameData.currentQuestion.targetPlayer.id.toString();
        // S'assurer que isTargetPlayer est correctement d√©fini
        if (gameData.currentUserState) {
          const userId = api.defaults.headers.userId;
          const isReallyTarget = targetId === userId?.toString();
          if (gameData.currentUserState.isTargetPlayer !== isReallyTarget) {
            console.warn(`‚ö†Ô∏è Correction d'incoh√©rence de joueur cible: ${gameData.currentUserState.isTargetPlayer} => ${isReallyTarget}`);
            gameData.currentUserState.isTargetPlayer = isReallyTarget;
          }
        }
      }

      // S'assurer que les r√©ponses ont bien la propri√©t√© isOwnAnswer
      if (gameData.answers && Array.isArray(gameData.answers)) {
        const userId = api.defaults.headers.userId;
        gameData.answers = gameData.answers.map(answer => ({
          ...answer,
          isOwnAnswer: answer.playerId === userId || answer.isOwnAnswer
        }));
      }
      
      return gameData;
    } catch (error) {
      console.error('‚ùå GameService: Erreur lors de la r√©cup√©ration de l\'√©tat du jeu', gameId, ':', error);
      
      // Si nous n'avons pas atteint le nombre maximum de tentatives, r√©essayer
      if (retryCount < maxRetries) {
        console.log(`üîÑ GameService: Tentative #${retryCount + 1}/${maxRetries} pour r√©cup√©rer l'√©tat du jeu ${gameId}`);
        // Attendre un peu avant de r√©essayer
        await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
        return this.getGameState(gameId, retryCount + 1, maxRetries);
      }
      
      throw error;
    }
  }

  // Soumettre une r√©ponse √† une question
  async submitAnswer(gameId: string, questionId: number | string, content: string) {
    console.log(`üéÆ GameService: Soumission de r√©ponse pour jeu ${gameId}, question ${questionId}`);
    try {
      const url = `/games/${gameId}/answer`;
      console.log('üîê API Request: POST', url);
      
      const response = await api.post(url, {
        question_id: questionId,
        content: content
      });
      
      console.log('‚úÖ GameService: R√©ponse soumise avec succ√®s');
      return response.data;
    } catch (error) {
      console.error('‚ùå GameService: Erreur lors de la soumission de la r√©ponse:', error);
      throw error;
    }
  }

  // Soumettre un vote pour une r√©ponse
  async submitVote(gameId: string, answerId: string, questionId: string) {
    console.log(`üéÆ GameService: Vote pour la r√©ponse ${answerId} dans le jeu ${gameId}`);
    try {
      const url = `/games/${gameId}/vote`;
      console.log('üîê API Request: POST', url);
      
      const response = await api.post(url, {
        answer_id: answerId,
        question_id: questionId
      });
      
      console.log('‚úÖ GameService: Vote soumis avec succ√®s');
      return response.data;
    } catch (error) {
      console.error('‚ùå GameService: Erreur lors de la soumission du vote:', error);
      throw error;
    }
  }

  // Passer au tour suivant
  async nextRound(gameId: string, retryCount = 0, maxRetries = 2) {
    console.log(`üéÆ GameService: Passage au tour suivant pour le jeu ${gameId}`);
    try {
      const url = `/games/${gameId}/next-round`;
      console.log('üîê API Request: POST', url);
      
      const response = await api.post(url);
      
      console.log('‚úÖ GameService: Passage au tour suivant r√©ussi');
      return response.data;
    } catch (error) {
      console.error('‚ùå GameService: Erreur lors du passage au tour suivant:', error);
      
      // Si nous n'avons pas atteint le nombre maximum de tentatives, r√©essayer
      if (retryCount < maxRetries) {
        console.log(`üîÑ GameService: Tentative #${retryCount + 1}/${maxRetries} pour passer au tour suivant ${gameId}`);
        // Attendre un peu avant de r√©essayer
        await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
        return this.nextRound(gameId, retryCount + 1, maxRetries);
      }
      
      throw error;
    }
  }

  // Ressynchroniser la connection WebSocket si n√©cessaire
  async ensureSocketConnection(gameId: string) {
    try {
      const diagnose = SocketService.diagnose();
      console.log(`üîå Diagnostic WebSocket: ${diagnose.status}`);
      
      if (diagnose.status !== 'connected' || diagnose.details.currentGame !== gameId) {
        console.log(`üîå Reconnexion WebSocket au jeu ${gameId}`);
        
        try {
          // Utiliser l'initialisation asynchrone qui est plus fiable
          const socket = await SocketService.getInstanceAsync();
          await SocketService.joinGameChannel(gameId);
          console.log(`‚úÖ Reconnexion WebSocket r√©ussie pour le jeu ${gameId}`);
          return true;
        } catch (socketError) {
          console.error('‚ùå Erreur lors de la r√©initialisation du socket:', socketError);
          return false;
        }
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification de la connexion WebSocket:', error);
      return false;
    }
  }
}

const gameService = new GameService();
export default gameService;
