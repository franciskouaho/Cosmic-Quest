import env from '#start/env'
import { Server } from 'socket.io'
import type { Server as HttpServer } from 'node:http'

export class SocketService {
  private io: Server | null = null

  init(httpServer: HttpServer) {
    if (this.io) {
      console.log('‚ö†Ô∏è Socket.IO d√©j√† initialis√©. Ignorer la r√©initialisation.')
      return this.io
    }

    try {
      this.io = new Server(httpServer, {
        cors: {
          origin: '*',
          methods: ['GET', 'POST'],
          credentials: true,
        },
        transports: ['websocket', 'polling'],
        allowEIO3: true,
        pingTimeout: 20000,
        pingInterval: 25000,
        connectTimeout: 30000,
        maxHttpBufferSize: 1e8, // 100 MB
      })

      console.log('‚ö° Initialisation du service WebSocket...')

      this.io.use((socket, next) => {
        try {
          const token = socket.handshake.auth?.token
          console.log(`üîê Nouvelle connexion WebSocket - Token pr√©sent: ${!!token}`)

          // Vous pouvez v√©rifier le token ici si n√©cessaire
          // Pour l'instant on accepte toutes les connexions
          next()
        } catch (error) {
          console.error("‚ùå Erreur d'authentification WebSocket:", error)
          next(new Error("Erreur d'authentification"))
        }
      })

      this.io.on('connection', (socket) => {
        console.log(`üü¢ Nouveau client connect√©: ${socket.id}`)

        // Envoyer un √©v√©nement de confirmation pour tester la connexion
        socket.emit('connection:success', { message: 'Connexion WebSocket √©tablie avec succ√®s' })

        // Gestion des salles
        socket.on('join-room', (data) => {
          try {
            const roomCode = typeof data === 'object' ? data.roomCode : data
            const roomChannel = `room:${roomCode}`

            socket.join(roomChannel)
            console.log(`üö™ Client ${socket.id} a rejoint la salle ${roomCode}`)

            // Confirmer au client qu'il a bien rejoint la salle
            socket.emit('room:joined', { roomCode })
          } catch (error) {
            console.error(`‚ùå Erreur lors de la jointure √† la salle:`, error)
            socket.emit('error', { message: 'Erreur lors de la jointure √† la salle' })
          }
        })

        socket.on('leave-room', (data) => {
          try {
            const roomCode = typeof data === 'object' ? data.roomCode : data
            const roomChannel = `room:${roomCode}`

            socket.leave(roomChannel)
            console.log(`üö™ Client ${socket.id} a quitt√© la salle ${roomCode}`)

            // Confirmer au client qu'il a bien quitt√© la salle
            socket.emit('room:left', { roomCode })
          } catch (error) {
            console.error(`‚ùå Erreur lors du d√©part de la salle:`, error)
            socket.emit('error', { message: 'Erreur lors du d√©part de la salle' })
          }
        })

        // Gestion des jeux
        socket.on('join-game', (data) => {
          try {
            const gameId = typeof data === 'object' ? data.gameId : data
            const gameChannel = `game:${gameId}`

            socket.join(gameChannel)
            console.log(`üéÆ Client ${socket.id} a rejoint le jeu ${gameId}`)

            // Confirmer au client qu'il a bien rejoint le jeu
            socket.emit('game:joined', { gameId })
          } catch (error) {
            console.error(`‚ùå Erreur lors de la jointure au jeu:`, error)
            socket.emit('error', { message: 'Erreur lors de la jointure au jeu' })
          }
        })

        socket.on('leave-game', (data) => {
          try {
            const gameId = typeof data === 'object' ? data.gameId : data
            const gameChannel = `game:${gameId}`

            socket.leave(gameChannel)
            console.log(`üéÆ Client ${socket.id} a quitt√© le jeu ${gameId}`)

            // Confirmer au client qu'il a bien quitt√© le jeu
            socket.emit('game:left', { gameId })
          } catch (error) {
            console.error(`‚ùå Erreur lors du d√©part du jeu:`, error)
            socket.emit('error', { message: 'Erreur lors du d√©part du jeu' })
          }
        })

        // Nouveau gestionnaire pour forcer la v√©rification de phase
        socket.on('game:force_check', async (data) => {
          try {
            const gameId = data.gameId
            console.log(`üîÑ [WebSocket] Demande de v√©rification forc√©e pour le jeu ${gameId}`)

            // Importer le contr√¥leur de jeu de mani√®re dynamique
            const GameController = (await import('#controllers/ws/game_controller')).default
            const controller = new GameController()

            // R√©cup√©rer les donn√©es n√©cessaires
            const game = await Game.find(gameId)
            if (!game) {
              console.error(`‚ùå [WebSocket] Jeu non trouv√©: ${gameId}`)
              return
            }

            // R√©cup√©rer la question actuelle
            const question = await Question.query()
              .where('game_id', gameId)
              .where('round_number', game.currentRound)
              .first()

            if (!question) {
              console.error(`‚ùå [WebSocket] Question non trouv√©e pour le jeu ${gameId}`)
              return
            }

            // Utiliser la m√©thode du contr√¥leur pour v√©rifier et faire progresser la phase
            const success = await controller.checkAndProgressPhase(gameId, question.id)

            console.log(
              `${success ? '‚úÖ' : '‚ÑπÔ∏è'} [WebSocket] V√©rification forc√©e ${success ? 'a mis √† jour' : "n'a pas modifi√©"} la phase`
            )
          } catch (error) {
            console.error('‚ùå [WebSocket] Erreur lors de la v√©rification forc√©e:', error)
          }
        })

        // √âv√©nement pour tester la connexion
        socket.on('ping', (callback) => {
          if (typeof callback === 'function') {
            callback({ status: 'success', time: new Date().toISOString() })
          } else {
            socket.emit('pong', { status: 'success', time: new Date().toISOString() })
          }
        })

        socket.on('disconnect', () => {
          console.log(`üî¥ Client d√©connect√©: ${socket.id}`)
        })

        socket.on('error', (error) => {
          console.error(`üö® Erreur WebSocket pour ${socket.id}:`, error)
        })
      })

      const port = env.get('PORT')
      console.log(`‚úÖ Serveur WebSocket en √©coute sur le port ${port}`)

      return this.io
    } catch (error) {
      console.error("‚ùå Erreur lors de l'initialisation du serveur WebSocket:", error)
      throw error
    }
  }

  getInstance() {
    if (!this.io) {
      throw new Error('Socket.IO non initialis√©')
    }
    return this.io
  }

  // M√©thode pour diffuser un message √† tous les clients
  broadcast(event: string, data: any) {
    if (!this.io) {
      console.error('‚ùå Socket.IO non initialis√©, impossible de diffuser le message')
      return
    }

    this.io.emit(event, data)
    console.log(`üì¢ Message diffus√© sur l'√©v√©nement "${event}"`)
  }

  // M√©thode pour diffuser un message √† une salle sp√©cifique
  broadcastToRoom(roomCode: string, event: string, data: any) {
    if (!this.io) {
      console.error('‚ùå Socket.IO non initialis√©, impossible de diffuser le message')
      return
    }

    this.io.to(`room:${roomCode}`).emit(event, data)
    console.log(`üì¢ Message diffus√© √† la salle "${roomCode}" sur l'√©v√©nement "${event}"`)
  }

  // M√©thode pour diffuser un message √† un jeu sp√©cifique
  broadcastToGame(gameId: string, event: string, data: any) {
    if (!this.io) {
      console.error('‚ùå Socket.IO non initialis√©, impossible de diffuser le message')
      return
    }

    this.io.to(`game:${gameId}`).emit(event, data)
    console.log(`üì¢ Message diffus√© au jeu "${gameId}" sur l'√©v√©nement "${event}"`)
  }
}

export default new SocketService()
