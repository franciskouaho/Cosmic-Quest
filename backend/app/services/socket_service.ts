import env from '#start/env'
import { Server } from 'socket.io'
import type { Server as HttpServer } from 'node:http'

export class SocketService {
  private io: Server | null = null

  init(httpServer: HttpServer) {
    if (this.io) {
      console.log('‚ö†Ô∏è Socket.IO d√©j√† initialis√©. Ignorer la r√©initialisation.')
      return this.io
    }

    try {
      this.io = new Server(httpServer, {
        cors: {
          origin: '*',
          methods: ['GET', 'POST'],
          credentials: true,
        },
        transports: ['websocket', 'polling'],
        allowEIO3: true,
        pingTimeout: 20000,
        pingInterval: 25000,
        connectTimeout: 30000,
        maxHttpBufferSize: 1e8, // 100 MB
      })

      console.log('‚ö° Initialisation du service WebSocket...')

      this.io.use((socket, next) => {
        try {
          const token = socket.handshake.auth?.token
          console.log(`üîê Nouvelle connexion WebSocket - Token pr√©sent: ${!!token}`)

          // Vous pouvez v√©rifier le token ici si n√©cessaire
          // Pour l'instant on accepte toutes les connexions
          next()
        } catch (error) {
          console.error("‚ùå Erreur d'authentification WebSocket:", error)
          next(new Error("Erreur d'authentification"))
        }
      })

      this.io.on('connection', (socket) => {
        console.log(`üü¢ Nouveau client connect√©: ${socket.id}`)

        // Envoyer un √©v√©nement de confirmation pour tester la connexion
        socket.emit('connection:success', { message: 'Connexion WebSocket √©tablie avec succ√®s' })

        // Gestion des salles
        socket.on('join-room', (data) => {
          try {
            const roomCode = typeof data === 'object' ? data.roomCode : data
            const roomChannel = `room:${roomCode}`

            socket.join(roomChannel)
            console.log(`üö™ Client ${socket.id} a rejoint la salle ${roomCode}`)

            // Confirmer au client qu'il a bien rejoint la salle
            socket.emit('room:joined', { roomCode })
          } catch (error) {
            console.error(`‚ùå Erreur lors de la jointure √† la salle:`, error)
            socket.emit('error', { message: 'Erreur lors de la jointure √† la salle' })
          }
        })

        socket.on('leave-room', (data) => {
          try {
            const roomCode = typeof data === 'object' ? data.roomCode : data
            const roomChannel = `room:${roomCode}`

            socket.leave(roomChannel)
            console.log(`üö™ Client ${socket.id} a quitt√© la salle ${roomCode}`)

            // Confirmer au client qu'il a bien quitt√© la salle
            socket.emit('room:left', { roomCode })
          } catch (error) {
            console.error(`‚ùå Erreur lors du d√©part de la salle:`, error)
            socket.emit('error', { message: 'Erreur lors du d√©part de la salle' })
          }
        })

        // Gestion des jeux
        socket.on('join-game', (data) => {
          try {
            const gameId = typeof data === 'object' ? data.gameId : data
            const gameChannel = `game:${gameId}`

            socket.join(gameChannel)
            console.log(`üéÆ Client ${socket.id} a rejoint le jeu ${gameId}`)

            // Confirmer au client qu'il a bien rejoint le jeu
            socket.emit('game:joined', { gameId })
          } catch (error) {
            console.error(`‚ùå Erreur lors de la jointure au jeu:`, error)
            socket.emit('error', { message: 'Erreur lors de la jointure au jeu' })
          }
        })

        socket.on('leave-game', (data) => {
          try {
            const gameId = typeof data === 'object' ? data.gameId : data
            const gameChannel = `game:${gameId}`

            socket.leave(gameChannel)
            console.log(`üéÆ Client ${socket.id} a quitt√© le jeu ${gameId}`)

            // Confirmer au client qu'il a bien quitt√© le jeu
            socket.emit('game:left', { gameId })
          } catch (error) {
            console.error(`‚ùå Erreur lors du d√©part du jeu:`, error)
            socket.emit('error', { message: 'Erreur lors du d√©part du jeu' })
          }
        })

        // Nouveau gestionnaire pour forcer la v√©rification de phase
        socket.on('game:force_check', async (data) => {
          try {
            const gameId = data.gameId
            console.log(`üîÑ [WebSocket] Demande de v√©rification forc√©e pour le jeu ${gameId}`)

            // Importer le contr√¥leur de jeu de mani√®re dynamique
            const GameController = (await import('#controllers/ws/game_controller')).default
            const controller = new GameController()

            // R√©cup√©rer les donn√©es n√©cessaires
            const game = await Game.find(gameId)
            if (!game) {
              console.error(`‚ùå [WebSocket] Jeu non trouv√©: ${gameId}`)
              return
            }

            // R√©cup√©rer la question actuelle
            const question = await Question.query()
              .where('game_id', gameId)
              .where('round_number', game.currentRound)
              .first()

            if (!question) {
              console.error(`‚ùå [WebSocket] Question non trouv√©e pour le jeu ${gameId}`)
              return
            }

            // Utiliser la m√©thode du contr√¥leur pour v√©rifier et faire progresser la phase
            const success = await controller.checkAndProgressPhase(gameId, question.id)

            console.log(
              `${success ? '‚úÖ' : '‚ÑπÔ∏è'} [WebSocket] V√©rification forc√©e ${success ? 'a mis √† jour' : "n'a pas modifi√©"} la phase`
            )
          } catch (error) {
            console.error('‚ùå [WebSocket] Erreur lors de la v√©rification forc√©e:', error)
          }
        })

        // Nouveau gestionnaire pour la soumission de r√©ponses
        socket.on('game:submit_answer', async (data, callback) => {
          try {
            console.log(`üéÆ [WebSocket] R√©ception d'une r√©ponse via WebSocket:`, data)

            // Extraire les donn√©es
            const { gameId, questionId, content } = data

            // V√©rifier que toutes les donn√©es n√©cessaires sont pr√©sentes
            if (!gameId || !questionId || !content) {
              console.error(`‚ùå [WebSocket] Donn√©es manquantes pour la soumission de r√©ponse`)
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'Donn√©es incompl√®tes pour la soumission de la r√©ponse',
                })
              }
              return
            }

            // R√©cup√©rer l'ID utilisateur depuis les informations de session
            const userId = socket.handshake.auth?.userId || socket.handshake.headers?.userId

            if (!userId) {
              console.error(`‚ùå [WebSocket] ID utilisateur manquant pour la soumission de r√©ponse`)
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'ID utilisateur manquant',
                })
              }
              return
            }

            // R√©cup√©rer le jeu et la question
            const Game = (await import('#models/game')).default
            const Question = (await import('#models/question')).default
            const Answer = (await import('#models/answer')).default

            // V√©rifier que le jeu existe
            const game = await Game.find(gameId)
            if (!game) {
              console.error(`‚ùå [WebSocket] Jeu non trouv√©: ${gameId}`)
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'Jeu non trouv√©',
                })
              }
              return
            }

            // V√©rifier que la question existe
            const question = await Question.query()
              .where('id', questionId)
              .where('game_id', gameId)
              .first()

            if (!question) {
              console.error(`‚ùå [WebSocket] Question non trouv√©e: ${questionId}`)
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'Question non trouv√©e',
                })
              }
              return
            }

            // V√©rifier que l'utilisateur n'est pas la cible
            if (question.targetPlayerId === Number(userId)) {
              console.error(`‚ùå [WebSocket] L'utilisateur est la cible: ${userId}`)
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'Vous √™tes la cible de cette question et ne pouvez pas y r√©pondre',
                  code: 'TARGET_PLAYER_CANNOT_ANSWER',
                })
              }
              return
            }

            // V√©rifier que l'utilisateur n'a pas d√©j√† r√©pondu
            const existingAnswer = await Answer.query()
              .where('question_id', questionId)
              .where('user_id', userId)
              .first()

            if (existingAnswer) {
              console.error(`‚ùå [WebSocket] L'utilisateur a d√©j√† r√©pondu: ${userId}`)
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'Vous avez d√©j√† r√©pondu √† cette question',
                })
              }
              return
            }

            try {
              // Cr√©er la r√©ponse avec un objet bien form√©
              const answer = await Answer.create({
                questionId: Number(questionId),
                userId: Number(userId),
                content: String(content).trim(),
                votesCount: 0,
                isSelected: false,
              })

              console.log(`‚úÖ [WebSocket] R√©ponse cr√©√©e avec succ√®s: ID=${answer.id}`)

              // Envoyer une confirmation directe √† l'√©metteur
              if (typeof callback === 'function') {
                callback({
                  success: true,
                  answerId: answer.id,
                })
              }

              // R√©cup√©rer les informations utilisateur
              const User = (await import('#models/user')).default
              const user = await User.find(userId)

              // Notifier tous les joueurs de la nouvelle r√©ponse
              this.io.to(`game:${gameId}`).emit('game:update', {
                type: 'new_answer',
                answer: {
                  id: answer.id,
                  content: answer.content,
                  playerId: userId,
                  playerName: user ? user.displayName || user.username : 'Joueur',
                },
              })

              // Envoyer √©galement une confirmation sp√©cifique
              socket.emit('answer:confirmation', {
                success: true,
                questionId,
                answerId: answer.id,
              })

              // V√©rifier si toutes les r√©ponses ont √©t√© soumises pour avancer la phase
              const GameController = (await import('#controllers/ws/game_controller')).default
              const controller = new GameController()
              await controller.checkAndProgressPhase(gameId, questionId)
            } catch (createError) {
              console.error(`‚ùå [WebSocket] Erreur lors de la cr√©ation de la r√©ponse:`, createError)

              // Log plus d√©taill√© pour mieux comprendre le probl√®me
              console.error(`üîé D√©tails de l'erreur:`, {
                message: createError.message,
                stack: createError.stack,
                data: { questionId, userId, content },
              })

              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'Erreur lors de la cr√©ation de la r√©ponse: ' + createError.message,
                })
              }
            }
          } catch (error) {
            console.error(`‚ùå [WebSocket] Erreur lors de la soumission de r√©ponse:`, error)
            if (typeof callback === 'function') {
              callback({
                success: false,
                error: 'Erreur lors de la soumission de la r√©ponse',
              })
            }
          }
        })

        // Nouveau gestionnaire pour la soumission de votes
        socket.on('game:submit_vote', async (data, callback) => {
          try {
            console.log(`üó≥Ô∏è [WebSocket] R√©ception d'un vote via WebSocket:`, data)

            // Extraire les donn√©es
            const { gameId, answerId, questionId } = data

            // V√©rifier que toutes les donn√©es n√©cessaires sont pr√©sentes
            if (!gameId || !answerId || !questionId) {
              console.error(`‚ùå [WebSocket] Donn√©es manquantes pour la soumission de vote`)
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'Donn√©es incompl√®tes pour la soumission du vote',
                })
              }
              return
            }

            // R√©cup√©rer l'ID utilisateur depuis les informations de session
            const userId = socket.handshake.auth?.userId || socket.handshake.headers?.userId

            if (!userId) {
              console.error(`‚ùå [WebSocket] ID utilisateur manquant pour la soumission de vote`)
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'ID utilisateur manquant',
                })
              }
              return
            }

            // Importer dynamiquement les mod√®les pour √©viter les d√©pendances circulaires
            const Game = (await import('#models/game')).default
            const Question = (await import('#models/question')).default
            const Answer = (await import('#models/answer')).default
            const Vote = (await import('#models/vote')).default

            // V√©rifier que le jeu existe
            const game = await Game.find(gameId)
            if (!game) {
              console.error(`‚ùå [WebSocket] Jeu non trouv√©: ${gameId}`)
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'Jeu non trouv√©',
                })
              }
              return
            }

            // V√©rifier que la question existe
            const question = await Question.query()
              .where('id', questionId)
              .where('game_id', gameId)
              .first()

            if (!question) {
              console.error(`‚ùå [WebSocket] Question non trouv√©e: ${questionId}`)
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'Question non trouv√©e',
                })
              }
              return
            }

            // V√©rifier que la r√©ponse existe
            const answer = await Answer.query()
              .where('id', answerId)
              .where('question_id', question.id)
              .first()

            if (!answer) {
              console.error(`‚ùå [WebSocket] R√©ponse non trouv√©e: ${answerId}`)
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'R√©ponse non trouv√©e',
                })
              }
              return
            }

            // V√©rifier que l'utilisateur ne vote pas pour sa propre r√©ponse
            if (answer.userId === Number(userId)) {
              console.error(
                `‚ùå [WebSocket] L'utilisateur ${userId} a tent√© de voter pour sa propre r√©ponse`
              )
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'Vous ne pouvez pas voter pour votre propre r√©ponse',
                })
              }
              return
            }

            // V√©rifier que l'utilisateur n'a pas d√©j√† vot√©
            const existingVote = await Vote.query()
              .where('question_id', question.id)
              .where('voter_id', userId)
              .first()

            if (existingVote) {
              console.error(
                `‚ùå [WebSocket] L'utilisateur ${userId} a d√©j√† vot√© pour cette question`
              )
              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'Vous avez d√©j√† vot√© pour cette question',
                })
              }
              return
            }

            try {
              // Cr√©er le vote
              const vote = await Vote.create({
                questionId: Number(questionId),
                voterId: Number(userId),
                answerId: Number(answerId),
              })

              console.log(`‚úÖ [WebSocket] Vote cr√©√© avec succ√®s: ID=${vote.id}`)

              // Incr√©menter le compteur de votes sur la r√©ponse
              answer.votesCount = (answer.votesCount || 0) + 1
              await answer.save()

              // Envoyer une confirmation directe √† l'√©metteur
              if (typeof callback === 'function') {
                callback({
                  success: true,
                  voteId: vote.id,
                })
              }

              // Notifier tous les joueurs du nouveau vote
              this.io.to(`game:${gameId}`).emit('game:update', {
                type: 'new_vote',
                vote: {
                  voterId: userId,
                  answerId: answerId,
                },
              })

              // Envoyer √©galement une confirmation sp√©cifique
              socket.emit('vote:confirmation', {
                success: true,
                questionId,
                voteId: vote.id,
              })

              // Importer le contr√¥leur de jeu pour v√©rifier la progression de phase
              const GameController = (await import('#controllers/ws/game_controller')).default
              const controller = new GameController()

              // V√©rifier si tous les joueurs qui peuvent voter l'ont fait
              const room = await (await import('#models/room')).default.find(game.roomId)
              const players = await room.related('players').query()
              const targetPlayer = players.find((p) => p.id === question.targetPlayerId)

              if (targetPlayer) {
                // Dans une partie standard, seule la cible vote
                // Si c'est le joueur cible qui a vot√©, c'est suffisant pour passer √† la phase suivante
                if (Number(userId) === targetPlayer.id) {
                  console.log(`‚úÖ [WebSocket] Le joueur cibl√© a vot√©, passage en phase r√©sultats`)

                  // Passer √† la phase de r√©sultats
                  game.currentPhase = 'results'
                  await game.save()

                  // Calculer les points et mettre √† jour les scores
                  await controller.calculateAndUpdateScores(question.id, game)

                  // Notifier tous les joueurs du changement de phase
                  this.io.to(`game:${gameId}`).emit('game:update', {
                    type: 'phase_change',
                    phase: 'results',
                    scores: game.scores,
                  })
                }
              }
            } catch (voteError) {
              console.error(`‚ùå [WebSocket] Erreur lors de la cr√©ation du vote:`, voteError)

              if (typeof callback === 'function') {
                callback({
                  success: false,
                  error: 'Erreur lors de la cr√©ation du vote: ' + voteError.message,
                })
              }
            }
          } catch (error) {
            console.error(`‚ùå [WebSocket] Erreur lors de la soumission de vote:`, error)
            if (typeof callback === 'function') {
              callback({
                success: false,
                error: 'Erreur lors de la soumission du vote',
              })
            }
          }
        })

        // √âv√©nement pour tester la connexion
        socket.on('ping', (callback) => {
          if (typeof callback === 'function') {
            callback({ status: 'success', time: new Date().toISOString() })
          } else {
            socket.emit('pong', { status: 'success', time: new Date().toISOString() })
          }
        })

        socket.on('disconnect', () => {
          console.log(`üî¥ Client d√©connect√©: ${socket.id}`)
        })

        socket.on('error', (error) => {
          console.error(`üö® Erreur WebSocket pour ${socket.id}:`, error)
        })
      })

      const port = env.get('PORT')
      console.log(`‚úÖ Serveur WebSocket en √©coute sur le port ${port}`)

      return this.io
    } catch (error) {
      console.error("‚ùå Erreur lors de l'initialisation du serveur WebSocket:", error)
      throw error
    }
  }

  getInstance() {
    if (!this.io) {
      throw new Error('Socket.IO non initialis√©')
    }
    return this.io
  }

  // M√©thode pour diffuser un message √† tous les clients
  broadcast(event: string, data: any) {
    if (!this.io) {
      console.error('‚ùå Socket.IO non initialis√©, impossible de diffuser le message')
      return
    }

    this.io.emit(event, data)
    console.log(`üì¢ Message diffus√© sur l'√©v√©nement "${event}"`)
  }

  // M√©thode pour diffuser un message √† une salle sp√©cifique
  broadcastToRoom(roomCode: string, event: string, data: any) {
    if (!this.io) {
      console.error('‚ùå Socket.IO non initialis√©, impossible de diffuser le message')
      return
    }

    this.io.to(`room:${roomCode}`).emit(event, data)
    console.log(`üì¢ Message diffus√© √† la salle "${roomCode}" sur l'√©v√©nement "${event}"`)
  }

  // M√©thode pour diffuser un message √† un jeu sp√©cifique
  broadcastToGame(gameId: string, event: string, data: any) {
    if (!this.io) {
      console.error('‚ùå Socket.IO non initialis√©, impossible de diffuser le message')
      return
    }

    this.io.to(`game:${gameId}`).emit(event, data)
    console.log(`üì¢ Message diffus√© au jeu "${gameId}" sur l'√©v√©nement "${event}"`)
  }
}

export default new SocketService()
